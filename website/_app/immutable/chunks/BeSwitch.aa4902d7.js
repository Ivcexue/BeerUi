import{S as G,i as H,s as J,d as U,Q as E,v as W,a3 as P,o as p,a as j,n as D,c as N,p as O,q as R,j as g,r as u,w as q,K as C,b as k,L as X,M,R as V,T as A,U as I,h as K,f as L,N as Y,O as Z}from"./index.21613952.js";const Q="src/lib/be-switch/BeSwitch.svelte",x=s=>({prop:s&1}),T=s=>({prop:s[0]});function S(s){let o,c,n,f,v,l,h,w;const m=s[11]["checked-slot"],r=E(m,s,s[10],T),_=s[11].default,a=E(_,s,s[10],null),b={c:function(){r&&r.c(),o=j(),a&&a.c(),c=j(),n=D("div"),f=D("span"),this.h()},l:function(t){r&&r.l(t),o=N(t),a&&a.l(t),c=N(t),n=O(t,"DIV",{name:!0,class:!0,"aria-checked":!0,role:!0,tabindex:!0});var i=R(n);f=O(i,"SPAN",{class:!0,style:!0}),R(f).forEach(g),i.forEach(g),this.h()},h:function(){u(f,"class","be-switch__core"),u(f,"style",v="width: "+s[1]+"px;"+s[3]),q(f,Q,49,2,1220),u(n,"name",s[2]),u(n,"class","be-switch"),u(n,"aria-checked",s[0]),u(n,"role","switch"),u(n,"tabindex","-1"),C(n,"is-checked",s[0]),C(n,"is-disabled",s[4]),q(n,Q,38,0,1026)},m:function(t,i){r&&r.m(t,i),k(t,o,i),a&&a.m(t,i),k(t,c,i),k(t,n,i),X(n,f),l=!0,h||(w=[M(n,"click",s[5],!1,!1,!1),M(n,"keydown",s[12],!1,!1,!1)],h=!0)},p:function(t,[i]){r&&r.p&&(!l||i&1025)&&V(r,m,t,t[10],l?I(m,t[10],i,x):A(t[10]),T),a&&a.p&&(!l||i&1024)&&V(a,_,t,t[10],l?I(_,t[10],i,null):A(t[10]),null),(!l||i&10&&v!==(v="width: "+t[1]+"px;"+t[3]))&&u(f,"style",v),(!l||i&4)&&u(n,"name",t[2]),(!l||i&1)&&u(n,"aria-checked",t[0]),(!l||i&1)&&C(n,"is-checked",t[0]),(!l||i&16)&&C(n,"is-disabled",t[4])},i:function(t){l||(K(r,t),K(a,t),l=!0)},o:function(t){L(r,t),L(a,t),l=!1},d:function(t){r&&r.d(t),t&&g(o),a&&a.d(t),t&&g(c),t&&g(n),h=!1,Y(w)}};return U("SvelteRegisterBlock",{block:b,id:S.name,type:"component",source:"",ctx:s}),b}function $(s,o,c){let n,{$$slots:f={},$$scope:v}=o;W("BeSwitch",f,["checked-slot","default"]);const l=P();let{checked:h=!1}=o,{disabled:w=!1}=o,{width:m=40}=o,{activeColor:r=""}=o,{name:_=""}=o,{inactiveColor:a=""}=o,{beforeChange:b=()=>!0}=o,d="";function t(){b()&&!n&&B()}function i(e){let y=e?r:a;c(3,d="border-color:"+y+";background-color:"+y)}function B(){const e=!h;c(0,h=e),l("change",e)}p(()=>{(r||a)&&i(h)});const z=["checked","disabled","width","activeColor","name","inactiveColor","beforeChange"];Object.keys(o).forEach(e=>{!~z.indexOf(e)&&e.slice(0,2)!=="$$"&&e!=="slot"&&console.warn(`<BeSwitch> was created with unknown prop '${e}'`)});function F(e){Z.call(this,s,e)}return s.$$set=e=>{"checked"in e&&c(0,h=e.checked),"disabled"in e&&c(6,w=e.disabled),"width"in e&&c(1,m=e.width),"activeColor"in e&&c(7,r=e.activeColor),"name"in e&&c(2,_=e.name),"inactiveColor"in e&&c(8,a=e.inactiveColor),"beforeChange"in e&&c(9,b=e.beforeChange),"$$scope"in e&&c(10,v=e.$$scope)},s.$capture_state=()=>({onMount:p,createEventDispatcher:P,dispatch:l,checked:h,disabled:w,width:m,activeColor:r,name:_,inactiveColor:a,beforeChange:b,switchColor:d,switchValue:t,setBackgroundColor:i,handleChange:B,switchDisabled:n}),s.$inject_state=e=>{"checked"in e&&c(0,h=e.checked),"disabled"in e&&c(6,w=e.disabled),"width"in e&&c(1,m=e.width),"activeColor"in e&&c(7,r=e.activeColor),"name"in e&&c(2,_=e.name),"inactiveColor"in e&&c(8,a=e.inactiveColor),"beforeChange"in e&&c(9,b=e.beforeChange),"switchColor"in e&&c(3,d=e.switchColor),"switchDisabled"in e&&c(4,n=e.switchDisabled)},o&&"$$inject"in o&&s.$inject_state(o.$$inject),s.$$.update=()=>{s.$$.dirty&385&&(r||a)&&i(h),s.$$.dirty&64&&c(4,n=w)},[h,m,_,d,n,t,w,r,a,b,v,f,F]}class te extends G{constructor(o){super(o),H(this,o,$,S,J,{checked:0,disabled:6,width:1,activeColor:7,name:2,inactiveColor:8,beforeChange:9}),U("SvelteRegisterComponent",{component:this,tagName:"BeSwitch",options:o,id:S.name})}get checked(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set checked(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get disabled(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set disabled(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get width(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set width(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get activeColor(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set activeColor(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get name(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set name(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get inactiveColor(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set inactiveColor(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get beforeChange(){throw new Error("<BeSwitch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set beforeChange(o){throw new Error("<BeSwitch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}export{te as B};
