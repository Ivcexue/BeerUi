import{S as L7,i as Y7,d as q,s as U7,B as e1,_ as p7,n as d,a as s,x as n,C as j,I as q7,p as l,j as e,c as h,q as a,y as c,D as x,r as R,w as o,L as t,b as U,E as F,h as M,f as L,F as Y,v as G7,P as J7,$ as g7,G as Fe}from"../chunks/index.21613952.js";import{D as id}from"../chunks/DemoBlock.d66327e5.js";import{B as ud}from"../chunks/BeTree.9079dbe6.js";import{B as Kn}from"../chunks/BeButton.f53a9660.js";import{B as y7}from"../chunks/BeInput.7724363f.js";const{console:Q7}=J7,r="src/routes/(components)/components/tree/+page.svelte";function C7(E){let f,u,v,i,_;function T(g){E[21](g)}let b={props:E[4]};E[0]!==void 0&&(b.data=E[0]),v=new ud({props:b,$$inline:!0}),e1.push(()=>p7(v,"data",T)),v.$on("nodeClick",E[5]);const p={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),this.h()},l:function(w){f=l(w,"DIV",{slot:!0});var K=a(f);u=l(K,"DIV",{class:!0});var G=a(u);x(v.$$.fragment,G),G.forEach(e),K.forEach(e),this.h()},h:function(){R(u,"class","demo-list"),o(u,r,261,12,6836),R(f,"slot","source"),o(f,r,260,8,6804)},m:function(w,K){U(w,f,K),t(f,u),F(v,u,null),_=!0},p:function(w,K){const G={};!i&&K&1&&(i=!0,G.data=w[0],g7(()=>i=!1)),v.$set(G)},i:function(w){_||(M(v.$$.fragment,w),_=!0)},o:function(w){L(v.$$.fragment,w),_=!1},d:function(w){w&&e(f),Y(v)}};return q("SvelteRegisterBlock",{block:p,id:C7.name,type:"slot",source:"(261:8) ",ctx:E}),p}function B7(E){let f,u,v,i;v=new ud({props:{props:E[6],load:E[7],lazy:!0,showCheckbox:!0},$$inline:!0}),v.$on("nodeClick",E[5]),v.$on("checkChange",E[8]);const _={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),this.h()},l:function(b){f=l(b,"DIV",{slot:!0});var p=a(f);u=l(p,"DIV",{class:!0});var g=a(u);x(v.$$.fragment,g),g.forEach(e),p.forEach(e),this.h()},h:function(){R(u,"class","demo-list"),o(u,r,317,12,8027),R(f,"slot","source"),o(f,r,316,8,7995)},m:function(b,p){U(b,f,p),t(f,u),F(v,u,null),i=!0},p:Fe,i:function(b){i||(M(v.$$.fragment,b),i=!0)},o:function(b){L(v.$$.fragment,b),i=!1},d:function(b){b&&e(f),Y(v)}};return q("SvelteRegisterBlock",{block:_,id:B7.name,type:"slot",source:"(317:8) ",ctx:E}),_}function R7(E){let f,u;const v={c:function(){f=d("div"),u=n("本例还展示了动态加载节点数据的方法。"),this.h()},l:function(_){f=l(_,"DIV",{slot:!0});var T=a(f);u=c(T,"本例还展示了动态加载节点数据的方法。"),T.forEach(e),this.h()},h:function(){R(f,"slot","description"),o(f,r,328,5,8333)},m:function(_,T){U(_,f,T),t(f,u)},p:Fe,d:function(_){_&&e(f)}};return q("SvelteRegisterBlock",{block:v,id:R7.name,type:"slot",source:"(329:5) ",ctx:E}),v}function N7(E){let f,u,v,i;v=new ud({props:{props:E[9],load:E[10],showCheckbox:!0,lazy:!0},$$inline:!0});const _={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),this.h()},l:function(b){f=l(b,"DIV",{slot:!0});var p=a(f);u=l(p,"DIV",{class:!0});var g=a(u);x(v.$$.fragment,g),g.forEach(e),p.forEach(e),this.h()},h:function(){R(u,"class","demo-list"),o(u,r,367,3,8953),R(f,"slot","source"),o(f,r,366,2,8930)},m:function(b,p){U(b,f,p),t(f,u),F(v,u,null),i=!0},p:Fe,i:function(b){i||(M(v.$$.fragment,b),i=!0)},o:function(b){L(v.$$.fragment,b),i=!1},d:function(b){b&&e(f),Y(v)}};return q("SvelteRegisterBlock",{block:_,id:N7.name,type:"slot",source:"(367:2) ",ctx:E}),_}function O7(E){let f,u;const v={c:function(){f=d("div"),u=n(`由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree
			某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。`),this.h()},l:function(_){f=l(_,"DIV",{slot:!0});var T=a(f);u=c(T,`由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree
			某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。`),T.forEach(e),this.h()},h:function(){R(f,"slot","description"),o(f,r,376,2,9094)},m:function(_,T){U(_,f,T),t(f,u)},p:Fe,d:function(_){_&&e(f)}};return q("SvelteRegisterBlock",{block:v,id:O7.name,type:"slot",source:"(377:2) ",ctx:E}),v}function K7(E){let f,u,v,i;v=new ud({props:{data:E[11],showCheckbox:!0,nodeKey:"id",defaultExpandedKeys:[2,3],defaultCheckedKeys:[5,7]},$$inline:!0});const _={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),this.h()},l:function(b){f=l(b,"DIV",{slot:!0});var p=a(f);u=l(p,"DIV",{class:!0});var g=a(u);x(v.$$.fragment,g),g.forEach(e),p.forEach(e),this.h()},h:function(){R(u,"class","demo-list"),o(u,r,431,12,9955),R(f,"slot","source"),o(f,r,430,8,9923)},m:function(b,p){U(b,f,p),t(f,u),F(v,u,null),i=!0},p:Fe,i:function(b){i||(M(v.$$.fragment,b),i=!0)},o:function(b){L(v.$$.fragment,b),i=!1},d:function(b){b&&e(f),Y(v)}};return q("SvelteRegisterBlock",{block:_,id:K7.name,type:"slot",source:"(431:8) ",ctx:E}),_}function w7(E){let f,u;const v={c:function(){f=d("div"),u=n("分别通过default-expanded-keys和default-checked-keys设置默认展开和默认选中的节点。需要注意的是，此时必须设置node-key，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。"),this.h()},l:function(_){f=l(_,"DIV",{slot:!0});var T=a(f);u=c(T,"分别通过default-expanded-keys和default-checked-keys设置默认展开和默认选中的节点。需要注意的是，此时必须设置node-key，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。"),T.forEach(e),this.h()},h:function(){R(f,"slot","description"),o(f,r,441,5,10227)},m:function(_,T){U(_,f,T),t(f,u)},p:Fe,d:function(_){_&&e(f)}};return q("SvelteRegisterBlock",{block:v,id:w7.name,type:"slot",source:"(442:5) ",ctx:E}),v}function H7(E){let f,u,v,i;v=new ud({props:{data:E[12],showCheckbox:!0,nodeKey:"id",defaultExpandedKeys:[2,3],defaultCheckedKeys:[5]},$$inline:!0});const _={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),this.h()},l:function(b){f=l(b,"DIV",{slot:!0});var p=a(f);u=l(p,"DIV",{class:!0});var g=a(u);x(v.$$.fragment,g),g.forEach(e),p.forEach(e),this.h()},h:function(){R(u,"class","demo-list"),o(u,r,488,12,11052),R(f,"slot","source"),o(f,r,487,8,11020)},m:function(b,p){U(b,f,p),t(f,u),F(v,u,null),i=!0},p:Fe,i:function(b){i||(M(v.$$.fragment,b),i=!0)},o:function(b){L(v.$$.fragment,b),i=!1},d:function(b){b&&e(f),Y(v)}};return q("SvelteRegisterBlock",{block:_,id:H7.name,type:"slot",source:"(488:8) ",ctx:E}),_}function S7(E){let f,u;const v={c:function(){f=d("div"),u=n("通过disabled设置禁用状态。"),this.h()},l:function(_){f=l(_,"DIV",{slot:!0});var T=a(f);u=c(T,"通过disabled设置禁用状态。"),T.forEach(e),this.h()},h:function(){R(f,"slot","description"),o(f,r,498,5,11315)},m:function(_,T){U(_,f,T),t(f,u)},p:Fe,d:function(_){_&&e(f)}};return q("SvelteRegisterBlock",{block:v,id:S7.name,type:"slot",source:"(499:5) ",ctx:E}),v}function I7(E){let f;const u={c:function(){f=n("通过 node 获取")},l:function(i){f=c(i,"通过 node 获取")},m:function(i,_){U(i,f,_)},d:function(i){i&&e(f)}};return q("SvelteRegisterBlock",{block:u,id:I7.name,type:"slot",source:"(587:10) <BeButton on:click={getCheckedNodes}>",ctx:E}),u}function P7(E){let f;const u={c:function(){f=n("通过 key 获取")},l:function(i){f=c(i,"通过 key 获取")},m:function(i,_){U(i,f,_)},d:function(i){i&&e(f)}};return q("SvelteRegisterBlock",{block:u,id:P7.name,type:"slot",source:"(588:10) <BeButton on:click={getCheckedKeys}>",ctx:E}),u}function z7(E){let f;const u={c:function(){f=n("通过 node 设置")},l:function(i){f=c(i,"通过 node 设置")},m:function(i,_){U(i,f,_)},d:function(i){i&&e(f)}};return q("SvelteRegisterBlock",{block:u,id:z7.name,type:"slot",source:"(589:10) <BeButton on:click={setCheckedNodes}>",ctx:E}),u}function V7(E){let f;const u={c:function(){f=n("通过 key 设置")},l:function(i){f=c(i,"通过 key 设置")},m:function(i,_){U(i,f,_)},d:function(i){i&&e(f)}};return q("SvelteRegisterBlock",{block:u,id:V7.name,type:"slot",source:"(590:10) <BeButton on:click={setCheckedKeys}>",ctx:E}),u}function A7(E){let f;const u={c:function(){f=n("清空")},l:function(i){f=c(i,"清空")},m:function(i,_){U(i,f,_)},d:function(i){i&&e(f)}};return q("SvelteRegisterBlock",{block:u,id:A7.name,type:"slot",source:"(591:10) <BeButton on:click={resetChecked}>",ctx:E}),u}function j7(E){let f,u,v,i,_,T,b,p,g,w,K,G,H,N,P;v=new Kn({props:{$$slots:{default:[I7]},$$scope:{ctx:E}},$$inline:!0}),v.$on("click",E[14]),_=new Kn({props:{$$slots:{default:[P7]},$$scope:{ctx:E}},$$inline:!0}),_.$on("click",E[15]),b=new Kn({props:{$$slots:{default:[z7]},$$scope:{ctx:E}},$$inline:!0}),b.$on("click",E[16]),g=new Kn({props:{$$slots:{default:[V7]},$$scope:{ctx:E}},$$inline:!0}),g.$on("click",E[17]),K=new Kn({props:{$$slots:{default:[A7]},$$scope:{ctx:E}},$$inline:!0}),K.$on("click",E[18]);let Z={data:E[13],showCheckbox:!0,nodeKey:"id",defaultExpandAll:!0,highlightCurrent:!0,defaultExpandedKeys:[2,3],defaultCheckedKeys:[5]};N=new ud({props:Z,$$inline:!0}),E[22](N);const V={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),i=s(),j(_.$$.fragment),T=s(),j(b.$$.fragment),p=s(),j(g.$$.fragment),w=s(),j(K.$$.fragment),G=s(),H=d("div"),j(N.$$.fragment),this.h()},l:function(B){f=l(B,"DIV",{slot:!0});var I=a(f);u=l(I,"DIV",{class:!0});var A=a(u);x(v.$$.fragment,A),i=h(A),x(_.$$.fragment,A),T=h(A),x(b.$$.fragment,A),p=h(A),x(g.$$.fragment,A),w=h(A),x(K.$$.fragment,A),A.forEach(e),G=h(I),H=l(I,"DIV",{class:!0});var X=a(H);x(N.$$.fragment,X),X.forEach(e),I.forEach(e),this.h()},h:function(){R(u,"class","buttons"),o(u,r,585,9,12916),R(H,"class","demo-list"),o(H,r,592,12,13296),R(f,"slot","source"),o(f,r,584,8,12887)},m:function(B,I){U(B,f,I),t(f,u),F(v,u,null),t(u,i),F(_,u,null),t(u,T),F(b,u,null),t(u,p),F(g,u,null),t(u,w),F(K,u,null),t(f,G),t(f,H),F(N,H,null),P=!0},p:function(B,I){const A={};I&268435456&&(A.$$scope={dirty:I,ctx:B}),v.$set(A);const X={};I&268435456&&(X.$$scope={dirty:I,ctx:B}),_.$set(X);const Me={};I&268435456&&(Me.$$scope={dirty:I,ctx:B}),b.$set(Me);const Le={};I&268435456&&(Le.$$scope={dirty:I,ctx:B}),g.$set(Le);const Q={};I&268435456&&(Q.$$scope={dirty:I,ctx:B}),K.$set(Q);const Ot={};N.$set(Ot)},i:function(B){P||(M(v.$$.fragment,B),M(_.$$.fragment,B),M(b.$$.fragment,B),M(g.$$.fragment,B),M(K.$$.fragment,B),M(N.$$.fragment,B),P=!0)},o:function(B){L(v.$$.fragment,B),L(_.$$.fragment,B),L(b.$$.fragment,B),L(g.$$.fragment,B),L(K.$$.fragment,B),L(N.$$.fragment,B),P=!1},d:function(B){B&&e(f),Y(v),Y(_),Y(b),Y(g),Y(K),E[22](null),Y(N)}};return q("SvelteRegisterBlock",{block:V,id:j7.name,type:"slot",source:"(585:8) ",ctx:E}),V}function x7(E){let f,u;const v={c:function(){f=d("div"),u=n("通过disabled设置禁用状态。"),this.h()},l:function(_){f=l(_,"DIV",{slot:!0});var T=a(f);u=c(T,"通过disabled设置禁用状态。"),T.forEach(e),this.h()},h:function(){R(f,"slot","description"),o(f,r,606,5,13727)},m:function(_,T){U(_,f,T),t(f,u)},p:Fe,d:function(_){_&&e(f)}};return q("SvelteRegisterBlock",{block:v,id:x7.name,type:"slot",source:"(607:5) ",ctx:E}),v}function F7(E){let f,u,v,i,_,T,b,p;function g(H){E[23](H)}let w={placeholder:"请输入内容"};E[3]!==void 0&&(w.value=E[3]),v=new y7({props:w,$$inline:!0}),e1.push(()=>p7(v,"value",g)),v.$on("input",E[19]);let K={data:E[13],showCheckbox:!0,nodeKey:"id",defaultExpandAll:!0,highlightCurrent:!0,defaultExpandedKeys:[2,3],defaultCheckedKeys:[5],filterNodeMethod:E[20]};b=new ud({props:K,$$inline:!0}),E[24](b);const G={c:function(){f=d("div"),u=d("div"),j(v.$$.fragment),_=s(),T=d("div"),j(b.$$.fragment),this.h()},l:function(N){f=l(N,"DIV",{slot:!0});var P=a(f);u=l(P,"DIV",{class:!0});var Z=a(u);x(v.$$.fragment,Z),Z.forEach(e),_=h(P),T=l(P,"DIV",{class:!0});var V=a(T);x(b.$$.fragment,V),V.forEach(e),P.forEach(e),this.h()},h:function(){R(u,"class","buttons"),o(u,r,639,3,14407),R(T,"class","demo-list"),o(T,r,642,3,14511),R(f,"slot","source"),o(f,r,638,2,14384)},m:function(N,P){U(N,f,P),t(f,u),F(v,u,null),t(f,_),t(f,T),F(b,T,null),p=!0},p:function(N,P){const Z={};!i&&P&8&&(i=!0,Z.value=N[3],g7(()=>i=!1)),v.$set(Z);const V={};b.$set(V)},i:function(N){p||(M(v.$$.fragment,N),M(b.$$.fragment,N),p=!0)},o:function(N){L(v.$$.fragment,N),L(b.$$.fragment,N),p=!1},d:function(N){N&&e(f),Y(v),E[24](null),Y(b)}};return q("SvelteRegisterBlock",{block:G,id:F7.name,type:"slot",source:"(639:2) ",ctx:E}),G}function M7(E){let f,u;const v={c:function(){f=d("div"),u=n("在需要对节点进行过滤时，调用 Tree 实例的filter方法，参数为关键字。需要注意的是，此时需要设置filterNodeMethod，值为过滤函数。"),this.h()},l:function(_){f=l(_,"DIV",{slot:!0});var T=a(f);u=c(T,"在需要对节点进行过滤时，调用 Tree 实例的filter方法，参数为关键字。需要注意的是，此时需要设置filterNodeMethod，值为过滤函数。"),T.forEach(e),this.h()},h:function(){R(f,"slot","description"),o(f,r,656,2,14809)},m:function(_,T){U(_,f,T),t(f,u)},p:Fe,d:function(_){_&&e(f)}};return q("SvelteRegisterBlock",{block:v,id:M7.name,type:"slot",source:"(657:2) ",ctx:E}),v}function P4(E){let f,u,v,i,_,T,b,p,g,w,K,G,H,N,P,Z,V,S,B,I,A,X,Me,Le,Q,Ot,Ye,md,wn,Ht,Hn,Ze,Sn,m,J,td,St,ed,vd,kd,d1,l1,dd,o1,$d,r1,a1,pd,n1,c1,ld,s1,gd,h1,f1,yd,i1,u1,od,v1,_d,_1,E1,Ue,Cd,tt,Bd,T1,b1,Rd,D1,m1,Nd,k1,$1,Od,p1,g1,Kd,y1,C1,k,et,wd,B1,R1,Hd,N1,O1,Sd,K1,w1,Id,H1,S1,Pd,I1,P1,dt,zd,z1,V1,Vd,A1,j1,Ad,x1,F1,jd,M1,L1,xd,Y1,U1,lt,Fd,q1,G1,Md,J1,Q1,Ld,W1,X1,Yd,Z1,tc,Ud,ec,dc,ot,qd,lc,oc,Gd,rc,ac,Jd,nc,cc,Qd,sc,hc,Wd,fc,ic,rt,Xd,uc,vc,Zd,_c,Ec,tl,Tc,bc,el,Dc,mc,dl,kc,$c,at,ll,pc,gc,ol,yc,Cc,rl,Bc,Rc,al,Nc,Oc,nl,Kc,wc,nt,cl,Hc,Sc,sl,Ic,Pc,hl,z4="Function(h, { node, data, store }",zc,Vc,fl,Ac,jc,il,xc,Fc,ct,ul,Mc,Lc,vl,Yc,Uc,_l,qc,Gc,El,Jc,Qc,Tl,Wc,Xc,st,bl,Zc,ts,Dl,es,ds,ml,ls,os,kl,rs,as,$l,ns,cs,ht,pl,ss,hs,gl,fs,is,yl,us,vs,Cl,_s,Es,Bl,Ts,bs,ft,Rl,Ds,ms,Nl,ks,$s,Ol,ps,gs,Kl,ys,Cs,wl,Bs,Rs,it,Hl,Ns,Os,Sl,Ks,ws,Il,Hs,Ss,Pl,Is,Ps,zl,zs,Vs,ut,Vl,As,js,Al,xs,Fs,jl,Ms,Ls,xl,Ys,Us,Fl,qs,Gs,vt,Ml,Js,Qs,Ll,Ws,Xs,Yl,Zs,t2,Ul,e2,d2,ql,l2,o2,_t,Gl,r2,a2,Jl,n2,c2,Ql,s2,h2,Wl,f2,i2,Xl,u2,v2,Et,Zl,_2,E2,to,T2,b2,eo,D2,m2,lo,k2,$2,oo,p2,g2,Tt,ro,y2,C2,ao,B2,R2,no,N2,O2,co,K2,w2,so,H2,S2,bt,ho,I2,P2,fo,z2,V2,io,A2,j2,uo,x2,F2,vo,M2,L2,Dt,_o,Y2,U2,Eo,q2,G2,To,J2,Q2,bo,W2,X2,Do,Z2,t3,mt,mo,e3,d3,ko,l3,o3,$o,r3,a3,po,n3,c3,go,s3,h3,kt,yo,f3,i3,Co,u3,v3,Bo,_3,E3,Ro,T3,b3,No,D3,m3,$t,Oo,k3,$3,Ko,p3,g3,wo,y3,C3,Ho,B3,R3,So,N3,O3,pt,Io,K3,w3,Po,H3,S3,zo,I3,P3,Vo,z3,V3,Ao,A3,j3,gt,jo,x3,F3,xo,M3,L3,Fo,Y3,U3,Mo,q3,G3,Lo,J3,Q3,yt,Yo,W3,X3,rd,Z3,Uo,th,eh,dh,qo,lh,oh,Go,rh,ah,Jo,nh,ch,Ed,sh,hh,qe,Qo,It,Wo,fh,ih,Xo,uh,vh,Zo,_h,Eh,Kt,Ct,tr,Th,bh,er,Dh,mh,dr,kh,$h,lr,ph,gh,or,yh,Ch,Bt,rr,Bh,Rh,ar,Nh,Oh,nr,Kh,wh,cr,Hh,Sh,sr,Ih,Ph,Rt,hr,zh,Vh,fr,Ah,jh,ir,xh,Fh,ur,Mh,Lh,vr,Yh,Uh,Nt,_r,qh,Gh,Er,Jh,Qh,Tr,Wh,Xh,br,Zh,tf,Dr,ef,df,Td,lf,of,Ge,mr,Pt,kr,rf,af,$r,nf,cf,pr,sf,hf,y,zt,gr,ff,uf,yr,vf,_f,Cr,Ef,Tf,Vt,Br,bf,Df,Rr,mf,kf,Nr,$f,pf,At,Or,gf,yf,jt,Cf,Kr,Bf,Rf,wr,Nf,Of,Kf,Je,wf,Hr,Hf,Sf,Sr,If,Pf,xt,Ir,zf,Vf,Pr,Af,jf,zr,xf,Ff,Ft,Vr,Mf,Lf,Mt,Yf,Ar,Uf,qf,jr,Gf,Jf,Qf,Qe,Wf,xr,Xf,Zf,Fr,ti,ei,Lt,Mr,di,li,Lr,oi,ri,We,ai,Yr,ni,ci,Ur,si,hi,Yt,qr,fi,ii,Gr,ui,vi,Jr,_i,Ei,Ut,Qr,Ti,bi,qt,Di,Wr,mi,ki,Xr,$i,pi,gi,Zr,yi,Ci,Gt,ta,Bi,Ri,Jt,Ni,ea,Oi,Ki,da,wi,Hi,Si,la,Ii,Pi,Qt,oa,zi,Vi,ra,Ai,ji,aa,xi,Fi,Wt,na,Mi,Li,ca,Yi,Ui,sa,qi,Gi,Xt,ha,Ji,Qi,fa,Wi,Xi,ia,Zi,tu,Zt,ua,eu,du,va,lu,ou,_a,ru,au,te,Ea,nu,cu,Ta,su,hu,ba,fu,iu,ee,Da,uu,vu,ma,_u,Eu,ka,Tu,bu,de,$a,Du,mu,pa,ku,$u,ga,pu,gu,le,ya,yu,Cu,Ca,Bu,Ru,Ba,Nu,Ou,oe,Ra,Ku,wu,Na,Hu,Su,Oa,Iu,Pu,bd,zu,Vu,Xe,Ka,re,wa,Au,ju,Ha,xu,Fu,Sa,Mu,Lu,W,ae,Ia,Yu,Uu,Pa,qu,Gu,ad,Ju,za,Qu,Wu,Xu,ne,Va,Zu,t4,Aa,e4,d4,nd,l4,ja,o4,r4,a4,ce,xa,n4,c4,Fa,s4,h4,cd,f4,Ma,i4,u4,v4,se,La,_4,E4,Ya,T4,b4,sd,D4,Ua,m4,k4,$4,he,qa,p4,g4,Ga,y4,C4,Ja,B4,R4,fe,Qa,N4,O4,Wa,K4,w4,hd,H4,Xa,S4,I4,Ln;V=new id({props:{js:`
const defaultProps = { children: 'children', label: 'label' }
const handleNodeClick = (evt) => console.log('index', evt.detail)`,code:`
<BeTree {data} props={defaultProps} on:nodeClick={handleNodeClick} />
`,$$slots:{source:[C7]},$$scope:{ctx:E}},$$inline:!0}),Q=new id({props:{js:`
const defaultProps1 = { children: 'zones', label: 'name' }
let count = 0
const loadNode = (node, resolve) => {
  if (node.level === 0) {
    return resolve([{ name: 'region1' }, { name: 'region2' }]);
  }
  if (node.level > 3) return resolve([]);
  if (!resolve) return;
  let hasChild;
  if (node?.data?.name === 'region1') {
    hasChild = true;
  } else if (node?.data?.name === 'region2') {
    hasChild = false;
  } else {
    hasChild = Math.random() > 0.5;
  }

  setTimeout(() => {
      let data;
    if (hasChild) {
      data = [{
        name: 'zone' + count++
      }, {
        name: 'zone' + count++
      }];
    } else {
      data = [];
    }

    resolve(data);
  }, 3500);
}
const handleCheckChange = (evt) => {
      console.log(evt);
}`,code:`
<BeTree
  props={defaultProps1}
  load={loadNode}
  lazy
  showCheckbox
  on:nodeClick={handleNodeClick}
  on:checkChange={handleCheckChange}
/>
`,$$slots:{description:[R7],source:[B7]},$$scope:{ctx:E}},$$inline:!0}),Ht=new id({props:{js:`
const defaultProps2 = {
  label: 'name',
  children: 'zones',
  isLeaf: 'leaf'
};
const loadNode2 = (node, resolve) => {
  if (node.level === 0) {
    return resolve([{ name: 'region' }]);
  }
  if (node.level > 1) return resolve([]);

  setTimeout(() => {
    const data = [{
      name: 'leaf',
      leaf: true
    }, {
      name: 'zone'
    }];

    resolve(data);
  }, 500)
}`,code:`
<BeTree
  props={defaultProps2}
  load={loadNode2}
  showCheckbox
  lazy
/>
`,$$slots:{description:[O7],source:[N7]},$$scope:{ctx:E}},$$inline:!0}),J=new id({props:{js:`
let dataDefault = [{
  id: 1,
  label: '一级 1',
  children: [{
    id: 4,
    label: '二级 1-1',
    children: [{
      id: 9,
      label: '三级 1-1-1'
    }, {
      id: 10,
      label: '三级 1-1-2'
    }]
  }]
}, {
  id: 2,
  label: '一级 2',
  children: [{
    id: 5,
    label: '二级 2-1'
  }, {
    id: 6,
    label: '二级 2-2'
  }]
}, {
  id: 3,
  label: '一级 3',
  children: [{
    id: 7,
    label: '二级 3-1'
  }, {
    id: 8,
    label: '二级 3-2'
  }]
}]
`,code:`
<BeTree
  data={dataDefault}
  showCheckbox
  nodeKey="id"
  defaultExpandedKeys={[2, 3]}
  defaultCheckedKeys={[5, 7]}
/>
`,$$slots:{description:[w7],source:[K7]},$$scope:{ctx:E}},$$inline:!0}),dd=new id({props:{js:`
const data2 = [{
  id: 1,
  label: '一级 2',
  children: [{
    id: 3,
    label: '二级 2-1',
    children: [{
      id: 4,
      label: '三级 3-1-1'
    }, {
      id: 5,
      label: '三级 3-1-2',
      disabled: true
    }]
  }, {
    id: 2,
    label: '二级 2-2',
    disabled: true,
    children: [{
      id: 6,
      label: '三级 3-2-1'
    }, {
      id: 7,
      label: '三级 3-2-2',
      disabled: true
    }]
  }]
}]
`,code:`
<BeTree
  data={data2}
  showCheckbox
  nodeKey="id"
  defaultExpandedKeys={[2, 3]}
  defaultCheckedKeys={[5]}
/>
`,$$slots:{description:[S7],source:[H7]},$$scope:{ctx:E}},$$inline:!0}),ld=new id({props:{js:`
let data3 = [{
  id: 1,
  label: '一级 1',
  children: [{
    id: 4,
    label: '二级 1-1',
    children: [{
      id: 9,
      label: '三级 1-1-1'
    }, {
      id: 10,
      label: '三级 1-1-2'
    }]
  }]
}, {
  id: 2,
  label: '一级 2',
  children: [{
    id: 5,
    label: '二级 2-1'
  }, {
    id: 6,
    label: '二级 2-2'
  }]
}, {
  id: 3,
  label: '一级 3',
  children: [{
    id: 7,
    label: '二级 3-1'
  }, {
    id: 8,
    label: '二级 3-2'
  }]
}];
let theTree = null
const getCheckedNodes = () => {
  console.log(theTree);
  console.log(theTree.getCheckedNodes());
}
const getCheckedKeys = () => {
  console.log(theTree.getCheckedKeys());
}
const setCheckedNodes = () => {
	theTree.setCheckedNodes([{
      id: 5,
      label: '二级 2-1'
    }, {
      id: 9,
      label: '三级 1-1-1'
    }])
  console.log('theTree', theTree);
}
const setCheckedKeys = () => {
	theTree.setCheckedKeys([3])
}
const resetChecked = () => {
	theTree.setCheckedKeys([])
}
`,code:`
<BeButton on:click={getCheckedNodes}>通过 node 获取</BeButton>
<BeButton on:click={getCheckedKeys}>通过 key 获取</BeButton>
<BeButton on:click={setCheckedNodes}>通过 node 设置</BeButton>
<BeButton on:click={setCheckedKeys}>通过 key 设置</BeButton>
<BeButton on:click={resetChecked}>清空</BeButton>
<BeTree
  bind:this={theTree}
  data={data3}
  showCheckbox
  nodeKey="id"
  defaultExpandAll
  highlightCurrent
  defaultExpandedKeys={[2, 3]}
  defaultCheckedKeys={[5]}
/>
`,$$slots:{description:[x7],source:[j7]},$$scope:{ctx:E}},$$inline:!0}),od=new id({props:{js:`
  let theFilterTree = null
  let value = ''
  const filterText = () => {
	  theFilterTree.filter(value)
  }
  const filterNodeMethod = (value, data) => {
	  if (!value) return true;
	  return data.label.indexOf(value) !== -1;
  }`,code:`
<BeInput bind:value placeholder="请输入内容" on:input={filterText} />
<BeTree
	bind:this={theFilterTree}
	data={data3}
	showCheckbox
	nodeKey="id"
	defaultExpandAll
	highlightCurrent
	defaultExpandedKeys={[2, 3]}
	defaultCheckedKeys={[5]}
	filterNodeMethod={filterNodeMethod}
/>
		`,$$slots:{description:[M7],source:[F7]},$$scope:{ctx:E}},$$inline:!0});const V4={c:function(){f=d("meta"),u=d("meta"),v=s(),i=d("div"),_=d("h2"),T=n("Tree 树形控件"),b=s(),p=d("p"),g=n("用清晰的层级结构展示信息，可展开或折叠。"),w=s(),K=d("h3"),G=n("基础用法"),H=s(),N=d("p"),P=n("基础的树形结构展示。"),Z=s(),j(V.$$.fragment),S=s(),B=d("h3"),I=n("可选择"),A=s(),X=d("p"),Me=n("适用于需要选择层级时使用。"),Le=s(),j(Q.$$.fragment),Ot=s(),Ye=d("h3"),md=n("懒加载自定义叶子节点"),wn=s(),j(Ht.$$.fragment),Hn=s(),Ze=d("h3"),Sn=n("默认展开和默认选中"),m=s(),j(J.$$.fragment),td=s(),St=d("h3"),ed=n("禁用状态"),vd=s(),kd=d("p"),d1=n("可将 Tree 的某些节点设置为禁用状态"),l1=s(),j(dd.$$.fragment),o1=s(),$d=d("h3"),r1=n("树节点的选择"),a1=s(),pd=d("p"),n1=n("可将 Tree 的某些节点设置为禁用状态"),c1=s(),j(ld.$$.fragment),s1=s(),gd=d("h3"),h1=n("节点过滤"),f1=s(),yd=d("p"),i1=n("通过关键字过滤树节点"),u1=s(),j(od.$$.fragment),v1=s(),_d=d("h3"),_1=n("Attributes"),E1=s(),Ue=d("table"),Cd=d("thead"),tt=d("tr"),Bd=d("th"),T1=n("参数"),b1=s(),Rd=d("th"),D1=n("说明"),m1=s(),Nd=d("th"),k1=n("类型"),$1=s(),Od=d("th"),p1=n("可选值"),g1=s(),Kd=d("th"),y1=n("默认值"),C1=s(),k=d("tbody"),et=d("tr"),wd=d("td"),B1=n("data"),R1=s(),Hd=d("td"),N1=n("展示数据"),O1=s(),Sd=d("td"),K1=n("array"),w1=s(),Id=d("td"),H1=n("—"),S1=s(),Pd=d("td"),I1=n("—"),P1=s(),dt=d("tr"),zd=d("td"),z1=n("emptyText"),V1=s(),Vd=d("td"),A1=n("内容为空的时候展示的文本"),j1=s(),Ad=d("td"),x1=n("String"),F1=s(),jd=d("td"),M1=n("—"),L1=s(),xd=d("td"),Y1=n("—"),U1=s(),lt=d("tr"),Fd=d("td"),q1=n("nodeKey"),G1=s(),Md=d("td"),J1=n("每个树节点用来作为唯一标识的属性，整棵树应该是唯一的"),Q1=s(),Ld=d("td"),W1=n("String"),X1=s(),Yd=d("td"),Z1=n("—"),tc=s(),Ud=d("td"),ec=n("label"),dc=s(),ot=d("tr"),qd=d("td"),lc=n("props"),oc=s(),Gd=d("td"),rc=n("配置选项，具体看下表"),ac=s(),Jd=d("td"),nc=n("object"),cc=s(),Qd=d("td"),sc=n("—"),hc=s(),Wd=d("td"),fc=n("—"),ic=s(),rt=d("tr"),Xd=d("td"),uc=n("renderAfterExpand"),vc=s(),Zd=d("td"),_c=n("是否在第一次展开某个树节点后才渲染其子节点"),Ec=s(),tl=d("td"),Tc=n("boolean"),bc=s(),el=d("td"),Dc=n("—"),mc=s(),dl=d("td"),kc=n("true"),$c=s(),at=d("tr"),ll=d("td"),pc=n("load"),gc=s(),ol=d("td"),yc=n("加载子树数据的方法，仅当 lazy 属性为true 时生效"),Cc=s(),rl=d("td"),Bc=n("function(node, resolve)"),Rc=s(),al=d("td"),Nc=n("—"),Oc=s(),nl=d("td"),Kc=n("—"),wc=s(),nt=d("tr"),cl=d("td"),Hc=n("renderContent"),Sc=s(),sl=d("td"),Ic=n("树节点的内容区的渲染 Function"),Pc=s(),hl=d("td"),zc=n(z4),Vc=s(),fl=d("td"),Ac=n("—"),jc=s(),il=d("td"),xc=n("—"),Fc=s(),ct=d("tr"),ul=d("td"),Mc=n("highlightCurrent"),Lc=s(),vl=d("td"),Yc=n("是否高亮当前选中节点，默认值是 false。"),Uc=s(),_l=d("td"),qc=n("boolean"),Gc=s(),El=d("td"),Jc=n("—"),Qc=s(),Tl=d("td"),Wc=n("false"),Xc=s(),st=d("tr"),bl=d("td"),Zc=n("defaultExpandAll"),ts=s(),Dl=d("td"),es=n("是否默认展开所有节点"),ds=s(),ml=d("td"),ls=n("boolean"),os=s(),kl=d("td"),rs=n("—"),as=s(),$l=d("td"),ns=n("false"),cs=s(),ht=d("tr"),pl=d("td"),ss=n("expandOnClickNode"),hs=s(),gl=d("td"),fs=n("是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。"),is=s(),yl=d("td"),us=n("boolean"),vs=s(),Cl=d("td"),_s=n("—"),Es=s(),Bl=d("td"),Ts=n("true"),bs=s(),ft=d("tr"),Rl=d("td"),Ds=n("checkOnClickNode"),ms=s(),Nl=d("td"),ks=n("是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。"),$s=s(),Ol=d("td"),ps=n("boolean"),gs=s(),Kl=d("td"),ys=n("—"),Cs=s(),wl=d("td"),Bs=n("false"),Rs=s(),it=d("tr"),Hl=d("td"),Ns=n("autoExpandParent"),Os=s(),Sl=d("td"),Ks=n("展开子节点的时候是否自动展开父节点"),ws=s(),Il=d("td"),Hs=n("boolean"),Ss=s(),Pl=d("td"),Is=n("—"),Ps=s(),zl=d("td"),zs=n("true"),Vs=s(),ut=d("tr"),Vl=d("td"),As=n("defaultExpandedKeys"),js=s(),Al=d("td"),xs=n("默认展开的节点的 key 的数组"),Fs=s(),jl=d("td"),Ms=n("array"),Ls=s(),xl=d("td"),Ys=n("—"),Us=s(),Fl=d("td"),qs=n("—"),Gs=s(),vt=d("tr"),Ml=d("td"),Js=n("showCheckbox"),Qs=s(),Ll=d("td"),Ws=n("节点是否可被选择"),Xs=s(),Yl=d("td"),Zs=n("boolean"),t2=s(),Ul=d("td"),e2=n("—"),d2=s(),ql=d("td"),l2=n("false"),o2=s(),_t=d("tr"),Gl=d("td"),r2=n("checkStrictly"),a2=s(),Jl=d("td"),n2=n("在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false"),c2=s(),Ql=d("td"),s2=n("boolean"),h2=s(),Wl=d("td"),f2=n("—"),i2=s(),Xl=d("td"),u2=n("false"),v2=s(),Et=d("tr"),Zl=d("td"),_2=n("defaultCheckedKeys"),E2=s(),to=d("td"),T2=n("默认勾选的节点的 key 的数组"),b2=s(),eo=d("td"),D2=n("array"),m2=s(),lo=d("td"),k2=n("—"),$2=s(),oo=d("td"),p2=n("—"),g2=s(),Tt=d("tr"),ro=d("td"),y2=n("currentNodeKey"),C2=s(),ao=d("td"),B2=n("当前选中的节点"),R2=s(),no=d("td"),N2=n("string, number"),O2=s(),co=d("td"),K2=n("—"),w2=s(),so=d("td"),H2=n("—"),S2=s(),bt=d("tr"),ho=d("td"),I2=n("filterNodeMethod"),P2=s(),fo=d("td"),z2=n("对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏"),V2=s(),io=d("td"),A2=n("Function(value, data, node)"),j2=s(),uo=d("td"),x2=n("—"),F2=s(),vo=d("td"),M2=n("—"),L2=s(),Dt=d("tr"),_o=d("td"),Y2=n("accordion(TODO)"),U2=s(),Eo=d("td"),q2=n("是否每次只打开一个同级树节点展开"),G2=s(),To=d("td"),J2=n("boolean"),Q2=s(),bo=d("td"),W2=n("—"),X2=s(),Do=d("td"),Z2=n("false"),t3=s(),mt=d("tr"),mo=d("td"),e3=n("indent(TODO)"),d3=s(),ko=d("td"),l3=n("相邻级节点间的水平缩进，单位为像素"),o3=s(),$o=d("td"),r3=n("number"),a3=s(),po=d("td"),n3=n("—"),c3=s(),go=d("td"),s3=n("16"),h3=s(),kt=d("tr"),yo=d("td"),f3=n("iconClass(TODO)"),i3=s(),Co=d("td"),u3=n("自定义树节点的图标"),v3=s(),Bo=d("td"),_3=n("string"),E3=s(),Ro=d("td"),T3=n("-"),b3=s(),No=d("td"),D3=n("-"),m3=s(),$t=d("tr"),Oo=d("td"),k3=n("lazy"),$3=s(),Ko=d("td"),p3=n("是否懒加载子节点，需与 load 方法结合使用"),g3=s(),wo=d("td"),y3=n("boolean"),C3=s(),Ho=d("td"),B3=n("—"),R3=s(),So=d("td"),N3=n("false"),O3=s(),pt=d("tr"),Io=d("td"),K3=n("draggable(TODO)"),w3=s(),Po=d("td"),H3=n("是否开启拖拽节点功能"),S3=s(),zo=d("td"),I3=n("boolean"),P3=s(),Vo=d("td"),z3=n("—"),V3=s(),Ao=d("td"),A3=n("false"),j3=s(),gt=d("tr"),jo=d("td"),x3=n("allowDrag(TODO)"),F3=s(),xo=d("td"),M3=n("判断节点能否被拖拽"),L3=s(),Fo=d("td"),Y3=n("Function(node)"),U3=s(),Mo=d("td"),q3=n("—"),G3=s(),Lo=d("td"),J3=n("—"),Q3=s(),yt=d("tr"),Yo=d("td"),W3=n("allowDrop(TODO)"),X3=s(),rd=d("td"),Z3=n("拖拽时判定目标节点能否被放置。"),Uo=d("code"),th=n("type"),eh=n(" 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后"),dh=s(),qo=d("td"),lh=n("Function(draggingNode, dropNode, type)"),oh=s(),Go=d("td"),rh=n("—"),ah=s(),Jo=d("td"),nh=n("—"),ch=s(),Ed=d("h3"),sh=n("Props"),hh=s(),qe=d("table"),Qo=d("thead"),It=d("tr"),Wo=d("th"),fh=n("参数"),ih=s(),Xo=d("th"),uh=n("说明"),vh=s(),Zo=d("th"),_h=n("类型"),Eh=s(),Kt=d("tbody"),Ct=d("tr"),tr=d("td"),Th=n("label"),bh=s(),er=d("td"),Dh=n("指定节点标签为节点对象的某个属性值"),mh=s(),dr=d("td"),kh=n("string, function(data, node)"),$h=s(),lr=d("td"),ph=n("—"),gh=s(),or=d("td"),yh=n("—"),Ch=s(),Bt=d("tr"),rr=d("td"),Bh=n("children"),Rh=s(),ar=d("td"),Nh=n("指定子树为节点对象的某个属性值"),Oh=s(),nr=d("td"),Kh=n("string"),wh=s(),cr=d("td"),Hh=n("—"),Sh=s(),sr=d("td"),Ih=n("—"),Ph=s(),Rt=d("tr"),hr=d("td"),zh=n("disabled"),Vh=s(),fr=d("td"),Ah=n("指定节点选择框是否禁用为节点对象的某个属性值"),jh=s(),ir=d("td"),xh=n("boolean, function(data, node)"),Fh=s(),ur=d("td"),Mh=n("—"),Lh=s(),vr=d("td"),Yh=n("—"),Uh=s(),Nt=d("tr"),_r=d("td"),qh=n("isLeaf"),Gh=s(),Er=d("td"),Jh=n("指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效"),Qh=s(),Tr=d("td"),Wh=n("boolean, function(data, node)"),Xh=s(),br=d("td"),Zh=n("—"),tf=s(),Dr=d("td"),ef=n("—"),df=s(),Td=d("h3"),lf=n("Method"),of=s(),Ge=d("table"),mr=d("thead"),Pt=d("tr"),kr=d("th"),rf=n("name"),af=s(),$r=d("th"),nf=n("说明"),cf=s(),pr=d("th"),sf=n("参数"),hf=s(),y=d("tbody"),zt=d("tr"),gr=d("td"),ff=n("filter"),uf=s(),yr=d("td"),vf=n("对树节点进行筛选操作"),_f=s(),Cr=d("td"),Ef=n("接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数"),Tf=s(),Vt=d("tr"),Br=d("td"),bf=n("updateKeyChildren"),Df=s(),Rr=d("td"),mf=n("通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性"),kf=s(),Nr=d("td"),$f=n("(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组"),pf=s(),At=d("tr"),Or=d("td"),gf=n("getCheckedNodes"),yf=s(),jt=d("td"),Cf=n("若节点可被选择（即 "),Kr=d("code"),Bf=n("show-checkbox"),Rf=n(" 为 "),wr=d("code"),Nf=n("true"),Of=n("），则返回目前被选中的节点所组成的数组"),Kf=s(),Je=d("td"),wf=n("(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 "),Hr=d("code"),Hf=n("false"),Sf=n(" 2. 是否包含半选节点，默认值为 "),Sr=d("code"),If=n("false"),Pf=s(),xt=d("tr"),Ir=d("td"),zf=n("setCheckedNodes"),Vf=s(),Pr=d("td"),Af=n("设置目前勾选的节点，使用此方法必须设置 node-key 属性"),jf=s(),zr=d("td"),xf=n("(nodes) 接收勾选节点数据的数组"),Ff=s(),Ft=d("tr"),Vr=d("td"),Mf=n("getCheckedKeys"),Lf=s(),Mt=d("td"),Yf=n("若节点可被选择（即 "),Ar=d("code"),Uf=n("show-checkbox"),qf=n(" 为 "),jr=d("code"),Gf=n("true"),Jf=n("），则返回目前被选中的节点的 key 所组成的数组"),Qf=s(),Qe=d("td"),Wf=n("(leafOnly) 接收一个 boolean 类型的参数，若为 "),xr=d("code"),Xf=n("true"),Zf=n(" 则仅返回被选中的叶子节点的 keys，默认值为 "),Fr=d("code"),ti=n("false"),ei=s(),Lt=d("tr"),Mr=d("td"),di=n("setCheckedKeys"),li=s(),Lr=d("td"),oi=n("通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性"),ri=s(),We=d("td"),ai=n("(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 "),Yr=d("code"),ni=n("true"),ci=n(` 则仅设置叶子节点的选中状态，默认值为
				`),Ur=d("code"),si=n("false"),hi=s(),Yt=d("tr"),qr=d("td"),fi=n("setChecked"),ii=s(),Gr=d("td"),ui=n("通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性"),vi=s(),Jr=d("td"),_i=n("(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false"),Ei=s(),Ut=d("tr"),Qr=d("td"),Ti=n("getHalfCheckedNodes"),bi=s(),qt=d("td"),Di=n("若节点可被选择（即 "),Wr=d("code"),mi=n("show-checkbox"),ki=n(" 为 "),Xr=d("code"),$i=n("true"),pi=n("），则返回目前半选中的节点所组成的数组"),gi=s(),Zr=d("td"),yi=n("-"),Ci=s(),Gt=d("tr"),ta=d("td"),Bi=n("getHalfCheckedKeys"),Ri=s(),Jt=d("td"),Ni=n("若节点可被选择（即 "),ea=d("code"),Oi=n("show-checkbox"),Ki=n(" 为 "),da=d("code"),wi=n("true"),Hi=n("），则返回目前半选中的节点的 key 所组成的数组"),Si=s(),la=d("td"),Ii=n("-"),Pi=s(),Qt=d("tr"),oa=d("td"),zi=n("getCurrentKey"),Vi=s(),ra=d("td"),Ai=n("获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null"),ji=s(),aa=d("td"),xi=n("—"),Fi=s(),Wt=d("tr"),na=d("td"),Mi=n("getCurrentNode"),Li=s(),ca=d("td"),Yi=n("获取当前被选中节点的 data，若没有节点被选中则返回 null"),Ui=s(),sa=d("td"),qi=n("—"),Gi=s(),Xt=d("tr"),ha=d("td"),Ji=n("setCurrentKey"),Qi=s(),fa=d("td"),Wi=n("通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性"),Xi=s(),ia=d("td"),Zi=n("(key) 待被选节点的 key，若为 null 则取消当前高亮的节点"),tu=s(),Zt=d("tr"),ua=d("td"),eu=n("setCurrentNode"),du=s(),va=d("td"),lu=n("通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性"),ou=s(),_a=d("td"),ru=n("(node) 待被选节点的 node"),au=s(),te=d("tr"),Ea=d("td"),nu=n("getNode"),cu=s(),Ta=d("td"),su=n("根据 data 或者 key 拿到 Tree 组件中的 node"),hu=s(),ba=d("td"),fu=n("(data) 要获得 node 的 key 或者 data"),iu=s(),ee=d("tr"),Da=d("td"),uu=n("remove"),vu=s(),ma=d("td"),_u=n("删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性"),Eu=s(),ka=d("td"),Tu=n("(data) 要删除的节点的 data 或者 node"),bu=s(),de=d("tr"),$a=d("td"),Du=n("append"),mu=s(),pa=d("td"),ku=n("为 Tree 中的一个节点追加一个子节点"),$u=s(),ga=d("td"),pu=n("(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node"),gu=s(),le=d("tr"),ya=d("td"),yu=n("insertBefore"),Cu=s(),Ca=d("td"),Bu=n("为 Tree 的一个节点的前面增加一个节点"),Ru=s(),Ba=d("td"),Nu=n("(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node"),Ou=s(),oe=d("tr"),Ra=d("td"),Ku=n("insertAfter"),wu=s(),Na=d("td"),Hu=n("为 Tree 的一个节点的后面增加一个节点"),Su=s(),Oa=d("td"),Iu=n("(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node"),Pu=s(),bd=d("h3"),zu=n("Events"),Vu=s(),Xe=d("table"),Ka=d("thead"),re=d("tr"),wa=d("th"),Au=n("事件名称"),ju=s(),Ha=d("th"),xu=n("说明"),Fu=s(),Sa=d("th"),Mu=n("回调参数"),Lu=s(),W=d("tbody"),ae=d("tr"),Ia=d("td"),Yu=n("nodeClick"),Uu=s(),Pa=d("td"),qu=n("节点被点击时的回调"),Gu=s(),ad=d("td"),Ju=n("共三个参数，依次为：传递给 "),za=d("code"),Qu=n("data"),Wu=n(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。"),Xu=s(),ne=d("tr"),Va=d("td"),Zu=n("nodeContextmenu"),t4=s(),Aa=d("td"),e4=n("当某一节点被鼠标右键点击时会触发该事件"),d4=s(),nd=d("td"),l4=n("共四个参数，依次为：event、传递给 "),ja=d("code"),o4=n("data"),r4=n(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。"),a4=s(),ce=d("tr"),xa=d("td"),n4=n("checkChange"),c4=s(),Fa=d("td"),s4=n("节点选中状态发生变化时的回调"),h4=s(),cd=d("td"),f4=n("共三个参数，依次为：传递给 "),Ma=d("code"),i4=n("data"),u4=n(" 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点"),v4=s(),se=d("tr"),La=d("td"),_4=n("check(TODO)"),E4=s(),Ya=d("td"),T4=n("当复选框被点击的时候触发"),b4=s(),sd=d("td"),D4=n("共两个参数，依次为：传递给 "),Ua=d("code"),m4=n("data"),k4=n(` 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含
				checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性`),$4=s(),he=d("tr"),qa=d("td"),p4=n("currentChange(TODO)"),g4=s(),Ga=d("td"),y4=n("当前选中节点变化时触发的事件"),C4=s(),Ja=d("td"),B4=n("共两个参数，依次为：当前节点的数据，当前节点的 Node 对象"),R4=s(),fe=d("tr"),Qa=d("td"),N4=n("nodeExpand"),O4=s(),Wa=d("td"),K4=n("节点被展开时触发的事件"),w4=s(),hd=d("td"),H4=n("共三个参数，依次为：传递给 "),Xa=d("code"),S4=n("data"),I4=n(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身"),this.h()},l:function(O){const z=q7("svelte-185pi9j",document.head);f=l(z,"META",{name:!0,content:!0}),u=l(z,"META",{name:!0,content:!0}),z.forEach(e),v=h(O),i=l(O,"DIV",{class:!0});var D=a(i);_=l(D,"H2",{});var In=a(_);T=c(In,"Tree 树形控件"),In.forEach(e),b=h(D),p=l(D,"P",{});var Pn=a(p);g=c(Pn,"用清晰的层级结构展示信息，可展开或折叠。"),Pn.forEach(e),w=h(D),K=l(D,"H3",{});var zn=a(K);G=c(zn,"基础用法"),zn.forEach(e),H=h(D),N=l(D,"P",{});var Vn=a(N);P=c(Vn,"基础的树形结构展示。"),Vn.forEach(e),Z=h(D),x(V.$$.fragment,D),S=h(D),B=l(D,"H3",{});var An=a(B);I=c(An,"可选择"),An.forEach(e),A=h(D),X=l(D,"P",{});var jn=a(X);Me=c(jn,"适用于需要选择层级时使用。"),jn.forEach(e),Le=h(D),x(Q.$$.fragment,D),Ot=h(D),Ye=l(D,"H3",{});var A4=a(Ye);md=c(A4,"懒加载自定义叶子节点"),A4.forEach(e),wn=h(D),x(Ht.$$.fragment,D),Hn=h(D),Ze=l(D,"H3",{});var j4=a(Ze);Sn=c(j4,"默认展开和默认选中"),j4.forEach(e),m=h(D),x(J.$$.fragment,D),td=h(D),St=l(D,"H3",{});var x4=a(St);ed=c(x4,"禁用状态"),x4.forEach(e),vd=h(D),kd=l(D,"P",{});var F4=a(kd);d1=c(F4,"可将 Tree 的某些节点设置为禁用状态"),F4.forEach(e),l1=h(D),x(dd.$$.fragment,D),o1=h(D),$d=l(D,"H3",{});var M4=a($d);r1=c(M4,"树节点的选择"),M4.forEach(e),a1=h(D),pd=l(D,"P",{});var L4=a(pd);n1=c(L4,"可将 Tree 的某些节点设置为禁用状态"),L4.forEach(e),c1=h(D),x(ld.$$.fragment,D),s1=h(D),gd=l(D,"H3",{});var Y4=a(gd);h1=c(Y4,"节点过滤"),Y4.forEach(e),f1=h(D),yd=l(D,"P",{});var U4=a(yd);i1=c(U4,"通过关键字过滤树节点"),U4.forEach(e),u1=h(D),x(od.$$.fragment,D),v1=h(D),_d=l(D,"H3",{class:!0});var q4=a(_d);_1=c(q4,"Attributes"),q4.forEach(e),E1=h(D),Ue=l(D,"TABLE",{class:!0});var Yn=a(Ue);Cd=l(Yn,"THEAD",{});var G4=a(Cd);tt=l(G4,"TR",{});var ie=a(tt);Bd=l(ie,"TH",{});var J4=a(Bd);T1=c(J4,"参数"),J4.forEach(e),b1=h(ie),Rd=l(ie,"TH",{});var Q4=a(Rd);D1=c(Q4,"说明"),Q4.forEach(e),m1=h(ie),Nd=l(ie,"TH",{});var W4=a(Nd);k1=c(W4,"类型"),W4.forEach(e),$1=h(ie),Od=l(ie,"TH",{});var X4=a(Od);p1=c(X4,"可选值"),X4.forEach(e),g1=h(ie),Kd=l(ie,"TH",{});var Z4=a(Kd);y1=c(Z4,"默认值"),Z4.forEach(e),ie.forEach(e),G4.forEach(e),C1=h(Yn),k=l(Yn,"TBODY",{});var $=a(k);et=l($,"TR",{});var ue=a(et);wd=l(ue,"TD",{});var t8=a(wd);B1=c(t8,"data"),t8.forEach(e),R1=h(ue),Hd=l(ue,"TD",{});var e8=a(Hd);N1=c(e8,"展示数据"),e8.forEach(e),O1=h(ue),Sd=l(ue,"TD",{});var d8=a(Sd);K1=c(d8,"array"),d8.forEach(e),w1=h(ue),Id=l(ue,"TD",{});var l8=a(Id);H1=c(l8,"—"),l8.forEach(e),S1=h(ue),Pd=l(ue,"TD",{});var o8=a(Pd);I1=c(o8,"—"),o8.forEach(e),ue.forEach(e),P1=h($),dt=l($,"TR",{});var ve=a(dt);zd=l(ve,"TD",{});var r8=a(zd);z1=c(r8,"emptyText"),r8.forEach(e),V1=h(ve),Vd=l(ve,"TD",{});var a8=a(Vd);A1=c(a8,"内容为空的时候展示的文本"),a8.forEach(e),j1=h(ve),Ad=l(ve,"TD",{});var n8=a(Ad);x1=c(n8,"String"),n8.forEach(e),F1=h(ve),jd=l(ve,"TD",{});var c8=a(jd);M1=c(c8,"—"),c8.forEach(e),L1=h(ve),xd=l(ve,"TD",{});var s8=a(xd);Y1=c(s8,"—"),s8.forEach(e),ve.forEach(e),U1=h($),lt=l($,"TR",{});var _e=a(lt);Fd=l(_e,"TD",{});var h8=a(Fd);q1=c(h8,"nodeKey"),h8.forEach(e),G1=h(_e),Md=l(_e,"TD",{});var f8=a(Md);J1=c(f8,"每个树节点用来作为唯一标识的属性，整棵树应该是唯一的"),f8.forEach(e),Q1=h(_e),Ld=l(_e,"TD",{});var i8=a(Ld);W1=c(i8,"String"),i8.forEach(e),X1=h(_e),Yd=l(_e,"TD",{});var u8=a(Yd);Z1=c(u8,"—"),u8.forEach(e),tc=h(_e),Ud=l(_e,"TD",{});var v8=a(Ud);ec=c(v8,"label"),v8.forEach(e),_e.forEach(e),dc=h($),ot=l($,"TR",{});var Ee=a(ot);qd=l(Ee,"TD",{});var _8=a(qd);lc=c(_8,"props"),_8.forEach(e),oc=h(Ee),Gd=l(Ee,"TD",{});var E8=a(Gd);rc=c(E8,"配置选项，具体看下表"),E8.forEach(e),ac=h(Ee),Jd=l(Ee,"TD",{});var T8=a(Jd);nc=c(T8,"object"),T8.forEach(e),cc=h(Ee),Qd=l(Ee,"TD",{});var b8=a(Qd);sc=c(b8,"—"),b8.forEach(e),hc=h(Ee),Wd=l(Ee,"TD",{});var D8=a(Wd);fc=c(D8,"—"),D8.forEach(e),Ee.forEach(e),ic=h($),rt=l($,"TR",{});var Te=a(rt);Xd=l(Te,"TD",{});var m8=a(Xd);uc=c(m8,"renderAfterExpand"),m8.forEach(e),vc=h(Te),Zd=l(Te,"TD",{});var k8=a(Zd);_c=c(k8,"是否在第一次展开某个树节点后才渲染其子节点"),k8.forEach(e),Ec=h(Te),tl=l(Te,"TD",{});var $8=a(tl);Tc=c($8,"boolean"),$8.forEach(e),bc=h(Te),el=l(Te,"TD",{});var p8=a(el);Dc=c(p8,"—"),p8.forEach(e),mc=h(Te),dl=l(Te,"TD",{});var g8=a(dl);kc=c(g8,"true"),g8.forEach(e),Te.forEach(e),$c=h($),at=l($,"TR",{});var be=a(at);ll=l(be,"TD",{});var y8=a(ll);pc=c(y8,"load"),y8.forEach(e),gc=h(be),ol=l(be,"TD",{});var C8=a(ol);yc=c(C8,"加载子树数据的方法，仅当 lazy 属性为true 时生效"),C8.forEach(e),Cc=h(be),rl=l(be,"TD",{});var B8=a(rl);Bc=c(B8,"function(node, resolve)"),B8.forEach(e),Rc=h(be),al=l(be,"TD",{});var R8=a(al);Nc=c(R8,"—"),R8.forEach(e),Oc=h(be),nl=l(be,"TD",{});var N8=a(nl);Kc=c(N8,"—"),N8.forEach(e),be.forEach(e),wc=h($),nt=l($,"TR",{});var De=a(nt);cl=l(De,"TD",{});var O8=a(cl);Hc=c(O8,"renderContent"),O8.forEach(e),Sc=h(De),sl=l(De,"TD",{});var K8=a(sl);Ic=c(K8,"树节点的内容区的渲染 Function"),K8.forEach(e),Pc=h(De),hl=l(De,"TD",{});var w8=a(hl);zc=c(w8,z4),w8.forEach(e),Vc=h(De),fl=l(De,"TD",{});var H8=a(fl);Ac=c(H8,"—"),H8.forEach(e),jc=h(De),il=l(De,"TD",{});var S8=a(il);xc=c(S8,"—"),S8.forEach(e),De.forEach(e),Fc=h($),ct=l($,"TR",{});var me=a(ct);ul=l(me,"TD",{});var I8=a(ul);Mc=c(I8,"highlightCurrent"),I8.forEach(e),Lc=h(me),vl=l(me,"TD",{});var P8=a(vl);Yc=c(P8,"是否高亮当前选中节点，默认值是 false。"),P8.forEach(e),Uc=h(me),_l=l(me,"TD",{});var z8=a(_l);qc=c(z8,"boolean"),z8.forEach(e),Gc=h(me),El=l(me,"TD",{});var V8=a(El);Jc=c(V8,"—"),V8.forEach(e),Qc=h(me),Tl=l(me,"TD",{});var A8=a(Tl);Wc=c(A8,"false"),A8.forEach(e),me.forEach(e),Xc=h($),st=l($,"TR",{});var ke=a(st);bl=l(ke,"TD",{});var j8=a(bl);Zc=c(j8,"defaultExpandAll"),j8.forEach(e),ts=h(ke),Dl=l(ke,"TD",{});var x8=a(Dl);es=c(x8,"是否默认展开所有节点"),x8.forEach(e),ds=h(ke),ml=l(ke,"TD",{});var F8=a(ml);ls=c(F8,"boolean"),F8.forEach(e),os=h(ke),kl=l(ke,"TD",{});var M8=a(kl);rs=c(M8,"—"),M8.forEach(e),as=h(ke),$l=l(ke,"TD",{});var L8=a($l);ns=c(L8,"false"),L8.forEach(e),ke.forEach(e),cs=h($),ht=l($,"TR",{});var $e=a(ht);pl=l($e,"TD",{});var Y8=a(pl);ss=c(Y8,"expandOnClickNode"),Y8.forEach(e),hs=h($e),gl=l($e,"TD",{});var U8=a(gl);fs=c(U8,"是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。"),U8.forEach(e),is=h($e),yl=l($e,"TD",{});var q8=a(yl);us=c(q8,"boolean"),q8.forEach(e),vs=h($e),Cl=l($e,"TD",{});var G8=a(Cl);_s=c(G8,"—"),G8.forEach(e),Es=h($e),Bl=l($e,"TD",{});var J8=a(Bl);Ts=c(J8,"true"),J8.forEach(e),$e.forEach(e),bs=h($),ft=l($,"TR",{});var pe=a(ft);Rl=l(pe,"TD",{});var Q8=a(Rl);Ds=c(Q8,"checkOnClickNode"),Q8.forEach(e),ms=h(pe),Nl=l(pe,"TD",{});var W8=a(Nl);ks=c(W8,"是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。"),W8.forEach(e),$s=h(pe),Ol=l(pe,"TD",{});var X8=a(Ol);ps=c(X8,"boolean"),X8.forEach(e),gs=h(pe),Kl=l(pe,"TD",{});var Z8=a(Kl);ys=c(Z8,"—"),Z8.forEach(e),Cs=h(pe),wl=l(pe,"TD",{});var t0=a(wl);Bs=c(t0,"false"),t0.forEach(e),pe.forEach(e),Rs=h($),it=l($,"TR",{});var ge=a(it);Hl=l(ge,"TD",{});var e0=a(Hl);Ns=c(e0,"autoExpandParent"),e0.forEach(e),Os=h(ge),Sl=l(ge,"TD",{});var d0=a(Sl);Ks=c(d0,"展开子节点的时候是否自动展开父节点"),d0.forEach(e),ws=h(ge),Il=l(ge,"TD",{});var l0=a(Il);Hs=c(l0,"boolean"),l0.forEach(e),Ss=h(ge),Pl=l(ge,"TD",{});var o0=a(Pl);Is=c(o0,"—"),o0.forEach(e),Ps=h(ge),zl=l(ge,"TD",{});var r0=a(zl);zs=c(r0,"true"),r0.forEach(e),ge.forEach(e),Vs=h($),ut=l($,"TR",{});var ye=a(ut);Vl=l(ye,"TD",{});var a0=a(Vl);As=c(a0,"defaultExpandedKeys"),a0.forEach(e),js=h(ye),Al=l(ye,"TD",{});var n0=a(Al);xs=c(n0,"默认展开的节点的 key 的数组"),n0.forEach(e),Fs=h(ye),jl=l(ye,"TD",{});var c0=a(jl);Ms=c(c0,"array"),c0.forEach(e),Ls=h(ye),xl=l(ye,"TD",{});var s0=a(xl);Ys=c(s0,"—"),s0.forEach(e),Us=h(ye),Fl=l(ye,"TD",{});var h0=a(Fl);qs=c(h0,"—"),h0.forEach(e),ye.forEach(e),Gs=h($),vt=l($,"TR",{});var Ce=a(vt);Ml=l(Ce,"TD",{});var f0=a(Ml);Js=c(f0,"showCheckbox"),f0.forEach(e),Qs=h(Ce),Ll=l(Ce,"TD",{});var i0=a(Ll);Ws=c(i0,"节点是否可被选择"),i0.forEach(e),Xs=h(Ce),Yl=l(Ce,"TD",{});var u0=a(Yl);Zs=c(u0,"boolean"),u0.forEach(e),t2=h(Ce),Ul=l(Ce,"TD",{});var v0=a(Ul);e2=c(v0,"—"),v0.forEach(e),d2=h(Ce),ql=l(Ce,"TD",{});var _0=a(ql);l2=c(_0,"false"),_0.forEach(e),Ce.forEach(e),o2=h($),_t=l($,"TR",{});var Be=a(_t);Gl=l(Be,"TD",{});var E0=a(Gl);r2=c(E0,"checkStrictly"),E0.forEach(e),a2=h(Be),Jl=l(Be,"TD",{});var T0=a(Jl);n2=c(T0,"在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false"),T0.forEach(e),c2=h(Be),Ql=l(Be,"TD",{});var b0=a(Ql);s2=c(b0,"boolean"),b0.forEach(e),h2=h(Be),Wl=l(Be,"TD",{});var D0=a(Wl);f2=c(D0,"—"),D0.forEach(e),i2=h(Be),Xl=l(Be,"TD",{});var m0=a(Xl);u2=c(m0,"false"),m0.forEach(e),Be.forEach(e),v2=h($),Et=l($,"TR",{});var Re=a(Et);Zl=l(Re,"TD",{});var k0=a(Zl);_2=c(k0,"defaultCheckedKeys"),k0.forEach(e),E2=h(Re),to=l(Re,"TD",{});var $0=a(to);T2=c($0,"默认勾选的节点的 key 的数组"),$0.forEach(e),b2=h(Re),eo=l(Re,"TD",{});var p0=a(eo);D2=c(p0,"array"),p0.forEach(e),m2=h(Re),lo=l(Re,"TD",{});var g0=a(lo);k2=c(g0,"—"),g0.forEach(e),$2=h(Re),oo=l(Re,"TD",{});var y0=a(oo);p2=c(y0,"—"),y0.forEach(e),Re.forEach(e),g2=h($),Tt=l($,"TR",{});var Ne=a(Tt);ro=l(Ne,"TD",{});var C0=a(ro);y2=c(C0,"currentNodeKey"),C0.forEach(e),C2=h(Ne),ao=l(Ne,"TD",{});var B0=a(ao);B2=c(B0,"当前选中的节点"),B0.forEach(e),R2=h(Ne),no=l(Ne,"TD",{});var R0=a(no);N2=c(R0,"string, number"),R0.forEach(e),O2=h(Ne),co=l(Ne,"TD",{});var N0=a(co);K2=c(N0,"—"),N0.forEach(e),w2=h(Ne),so=l(Ne,"TD",{});var O0=a(so);H2=c(O0,"—"),O0.forEach(e),Ne.forEach(e),S2=h($),bt=l($,"TR",{});var Oe=a(bt);ho=l(Oe,"TD",{});var K0=a(ho);I2=c(K0,"filterNodeMethod"),K0.forEach(e),P2=h(Oe),fo=l(Oe,"TD",{});var w0=a(fo);z2=c(w0,"对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏"),w0.forEach(e),V2=h(Oe),io=l(Oe,"TD",{});var H0=a(io);A2=c(H0,"Function(value, data, node)"),H0.forEach(e),j2=h(Oe),uo=l(Oe,"TD",{});var S0=a(uo);x2=c(S0,"—"),S0.forEach(e),F2=h(Oe),vo=l(Oe,"TD",{});var I0=a(vo);M2=c(I0,"—"),I0.forEach(e),Oe.forEach(e),L2=h($),Dt=l($,"TR",{});var Ke=a(Dt);_o=l(Ke,"TD",{});var P0=a(_o);Y2=c(P0,"accordion(TODO)"),P0.forEach(e),U2=h(Ke),Eo=l(Ke,"TD",{});var z0=a(Eo);q2=c(z0,"是否每次只打开一个同级树节点展开"),z0.forEach(e),G2=h(Ke),To=l(Ke,"TD",{});var V0=a(To);J2=c(V0,"boolean"),V0.forEach(e),Q2=h(Ke),bo=l(Ke,"TD",{});var A0=a(bo);W2=c(A0,"—"),A0.forEach(e),X2=h(Ke),Do=l(Ke,"TD",{});var j0=a(Do);Z2=c(j0,"false"),j0.forEach(e),Ke.forEach(e),t3=h($),mt=l($,"TR",{});var we=a(mt);mo=l(we,"TD",{});var x0=a(mo);e3=c(x0,"indent(TODO)"),x0.forEach(e),d3=h(we),ko=l(we,"TD",{});var F0=a(ko);l3=c(F0,"相邻级节点间的水平缩进，单位为像素"),F0.forEach(e),o3=h(we),$o=l(we,"TD",{});var M0=a($o);r3=c(M0,"number"),M0.forEach(e),a3=h(we),po=l(we,"TD",{});var L0=a(po);n3=c(L0,"—"),L0.forEach(e),c3=h(we),go=l(we,"TD",{});var Y0=a(go);s3=c(Y0,"16"),Y0.forEach(e),we.forEach(e),h3=h($),kt=l($,"TR",{});var He=a(kt);yo=l(He,"TD",{});var U0=a(yo);f3=c(U0,"iconClass(TODO)"),U0.forEach(e),i3=h(He),Co=l(He,"TD",{});var q0=a(Co);u3=c(q0,"自定义树节点的图标"),q0.forEach(e),v3=h(He),Bo=l(He,"TD",{});var G0=a(Bo);_3=c(G0,"string"),G0.forEach(e),E3=h(He),Ro=l(He,"TD",{});var J0=a(Ro);T3=c(J0,"-"),J0.forEach(e),b3=h(He),No=l(He,"TD",{});var Q0=a(No);D3=c(Q0,"-"),Q0.forEach(e),He.forEach(e),m3=h($),$t=l($,"TR",{});var Se=a($t);Oo=l(Se,"TD",{});var W0=a(Oo);k3=c(W0,"lazy"),W0.forEach(e),$3=h(Se),Ko=l(Se,"TD",{});var X0=a(Ko);p3=c(X0,"是否懒加载子节点，需与 load 方法结合使用"),X0.forEach(e),g3=h(Se),wo=l(Se,"TD",{});var Z0=a(wo);y3=c(Z0,"boolean"),Z0.forEach(e),C3=h(Se),Ho=l(Se,"TD",{});var t5=a(Ho);B3=c(t5,"—"),t5.forEach(e),R3=h(Se),So=l(Se,"TD",{});var e5=a(So);N3=c(e5,"false"),e5.forEach(e),Se.forEach(e),O3=h($),pt=l($,"TR",{});var Ie=a(pt);Io=l(Ie,"TD",{});var d5=a(Io);K3=c(d5,"draggable(TODO)"),d5.forEach(e),w3=h(Ie),Po=l(Ie,"TD",{});var l5=a(Po);H3=c(l5,"是否开启拖拽节点功能"),l5.forEach(e),S3=h(Ie),zo=l(Ie,"TD",{});var o5=a(zo);I3=c(o5,"boolean"),o5.forEach(e),P3=h(Ie),Vo=l(Ie,"TD",{});var r5=a(Vo);z3=c(r5,"—"),r5.forEach(e),V3=h(Ie),Ao=l(Ie,"TD",{});var a5=a(Ao);A3=c(a5,"false"),a5.forEach(e),Ie.forEach(e),j3=h($),gt=l($,"TR",{});var Pe=a(gt);jo=l(Pe,"TD",{});var n5=a(jo);x3=c(n5,"allowDrag(TODO)"),n5.forEach(e),F3=h(Pe),xo=l(Pe,"TD",{});var c5=a(xo);M3=c(c5,"判断节点能否被拖拽"),c5.forEach(e),L3=h(Pe),Fo=l(Pe,"TD",{});var s5=a(Fo);Y3=c(s5,"Function(node)"),s5.forEach(e),U3=h(Pe),Mo=l(Pe,"TD",{});var h5=a(Mo);q3=c(h5,"—"),h5.forEach(e),G3=h(Pe),Lo=l(Pe,"TD",{});var f5=a(Lo);J3=c(f5,"—"),f5.forEach(e),Pe.forEach(e),Q3=h($),yt=l($,"TR",{});var ze=a(yt);Yo=l(ze,"TD",{});var i5=a(Yo);W3=c(i5,"allowDrop(TODO)"),i5.forEach(e),X3=h(ze),rd=l(ze,"TD",{});var Un=a(rd);Z3=c(Un,"拖拽时判定目标节点能否被放置。"),Uo=l(Un,"CODE",{});var u5=a(Uo);th=c(u5,"type"),u5.forEach(e),eh=c(Un," 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后"),Un.forEach(e),dh=h(ze),qo=l(ze,"TD",{});var v5=a(qo);lh=c(v5,"Function(draggingNode, dropNode, type)"),v5.forEach(e),oh=h(ze),Go=l(ze,"TD",{});var _5=a(Go);rh=c(_5,"—"),_5.forEach(e),ah=h(ze),Jo=l(ze,"TD",{});var E5=a(Jo);nh=c(E5,"—"),E5.forEach(e),ze.forEach(e),$.forEach(e),Yn.forEach(e),ch=h(D),Ed=l(D,"H3",{class:!0});var T5=a(Ed);sh=c(T5,"Props"),T5.forEach(e),hh=h(D),qe=l(D,"TABLE",{class:!0});var qn=a(qe);Qo=l(qn,"THEAD",{});var b5=a(Qo);It=l(b5,"TR",{});var Za=a(It);Wo=l(Za,"TH",{});var D5=a(Wo);fh=c(D5,"参数"),D5.forEach(e),ih=h(Za),Xo=l(Za,"TH",{});var m5=a(Xo);uh=c(m5,"说明"),m5.forEach(e),vh=h(Za),Zo=l(Za,"TH",{});var k5=a(Zo);_h=c(k5,"类型"),k5.forEach(e),Za.forEach(e),b5.forEach(e),Eh=h(qn),Kt=l(qn,"TBODY",{});var fd=a(Kt);Ct=l(fd,"TR",{});var Ve=a(Ct);tr=l(Ve,"TD",{});var $5=a(tr);Th=c($5,"label"),$5.forEach(e),bh=h(Ve),er=l(Ve,"TD",{});var p5=a(er);Dh=c(p5,"指定节点标签为节点对象的某个属性值"),p5.forEach(e),mh=h(Ve),dr=l(Ve,"TD",{});var g5=a(dr);kh=c(g5,"string, function(data, node)"),g5.forEach(e),$h=h(Ve),lr=l(Ve,"TD",{});var y5=a(lr);ph=c(y5,"—"),y5.forEach(e),gh=h(Ve),or=l(Ve,"TD",{});var C5=a(or);yh=c(C5,"—"),C5.forEach(e),Ve.forEach(e),Ch=h(fd),Bt=l(fd,"TR",{});var Ae=a(Bt);rr=l(Ae,"TD",{});var B5=a(rr);Bh=c(B5,"children"),B5.forEach(e),Rh=h(Ae),ar=l(Ae,"TD",{});var R5=a(ar);Nh=c(R5,"指定子树为节点对象的某个属性值"),R5.forEach(e),Oh=h(Ae),nr=l(Ae,"TD",{});var N5=a(nr);Kh=c(N5,"string"),N5.forEach(e),wh=h(Ae),cr=l(Ae,"TD",{});var O5=a(cr);Hh=c(O5,"—"),O5.forEach(e),Sh=h(Ae),sr=l(Ae,"TD",{});var K5=a(sr);Ih=c(K5,"—"),K5.forEach(e),Ae.forEach(e),Ph=h(fd),Rt=l(fd,"TR",{});var je=a(Rt);hr=l(je,"TD",{});var w5=a(hr);zh=c(w5,"disabled"),w5.forEach(e),Vh=h(je),fr=l(je,"TD",{});var H5=a(fr);Ah=c(H5,"指定节点选择框是否禁用为节点对象的某个属性值"),H5.forEach(e),jh=h(je),ir=l(je,"TD",{});var S5=a(ir);xh=c(S5,"boolean, function(data, node)"),S5.forEach(e),Fh=h(je),ur=l(je,"TD",{});var I5=a(ur);Mh=c(I5,"—"),I5.forEach(e),Lh=h(je),vr=l(je,"TD",{});var P5=a(vr);Yh=c(P5,"—"),P5.forEach(e),je.forEach(e),Uh=h(fd),Nt=l(fd,"TR",{});var xe=a(Nt);_r=l(xe,"TD",{});var z5=a(_r);qh=c(z5,"isLeaf"),z5.forEach(e),Gh=h(xe),Er=l(xe,"TD",{});var V5=a(Er);Jh=c(V5,"指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效"),V5.forEach(e),Qh=h(xe),Tr=l(xe,"TD",{});var A5=a(Tr);Wh=c(A5,"boolean, function(data, node)"),A5.forEach(e),Xh=h(xe),br=l(xe,"TD",{});var j5=a(br);Zh=c(j5,"—"),j5.forEach(e),tf=h(xe),Dr=l(xe,"TD",{});var x5=a(Dr);ef=c(x5,"—"),x5.forEach(e),xe.forEach(e),fd.forEach(e),qn.forEach(e),df=h(D),Td=l(D,"H3",{class:!0});var F5=a(Td);lf=c(F5,"Method"),F5.forEach(e),of=h(D),Ge=l(D,"TABLE",{class:!0});var Gn=a(Ge);mr=l(Gn,"THEAD",{});var M5=a(mr);Pt=l(M5,"TR",{});var tn=a(Pt);kr=l(tn,"TH",{});var L5=a(kr);rf=c(L5,"name"),L5.forEach(e),af=h(tn),$r=l(tn,"TH",{});var Y5=a($r);nf=c(Y5,"说明"),Y5.forEach(e),cf=h(tn),pr=l(tn,"TH",{});var U5=a(pr);sf=c(U5,"参数"),U5.forEach(e),tn.forEach(e),M5.forEach(e),hf=h(Gn),y=l(Gn,"TBODY",{});var C=a(y);zt=l(C,"TR",{});var en=a(zt);gr=l(en,"TD",{});var q5=a(gr);ff=c(q5,"filter"),q5.forEach(e),uf=h(en),yr=l(en,"TD",{});var G5=a(yr);vf=c(G5,"对树节点进行筛选操作"),G5.forEach(e),_f=h(en),Cr=l(en,"TD",{});var J5=a(Cr);Ef=c(J5,"接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数"),J5.forEach(e),en.forEach(e),Tf=h(C),Vt=l(C,"TR",{});var dn=a(Vt);Br=l(dn,"TD",{});var Q5=a(Br);bf=c(Q5,"updateKeyChildren"),Q5.forEach(e),Df=h(dn),Rr=l(dn,"TD",{});var W5=a(Rr);mf=c(W5,"通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性"),W5.forEach(e),kf=h(dn),Nr=l(dn,"TD",{});var X5=a(Nr);$f=c(X5,"(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组"),X5.forEach(e),dn.forEach(e),pf=h(C),At=l(C,"TR",{});var ln=a(At);Or=l(ln,"TD",{});var Z5=a(Or);gf=c(Z5,"getCheckedNodes"),Z5.forEach(e),yf=h(ln),jt=l(ln,"TD",{});var on=a(jt);Cf=c(on,"若节点可被选择（即 "),Kr=l(on,"CODE",{});var t6=a(Kr);Bf=c(t6,"show-checkbox"),t6.forEach(e),Rf=c(on," 为 "),wr=l(on,"CODE",{});var e6=a(wr);Nf=c(e6,"true"),e6.forEach(e),Of=c(on,"），则返回目前被选中的节点所组成的数组"),on.forEach(e),Kf=h(ln),Je=l(ln,"TD",{});var xn=a(Je);wf=c(xn,"(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 "),Hr=l(xn,"CODE",{});var d6=a(Hr);Hf=c(d6,"false"),d6.forEach(e),Sf=c(xn," 2. 是否包含半选节点，默认值为 "),Sr=l(xn,"CODE",{});var l6=a(Sr);If=c(l6,"false"),l6.forEach(e),xn.forEach(e),ln.forEach(e),Pf=h(C),xt=l(C,"TR",{});var rn=a(xt);Ir=l(rn,"TD",{});var o6=a(Ir);zf=c(o6,"setCheckedNodes"),o6.forEach(e),Vf=h(rn),Pr=l(rn,"TD",{});var r6=a(Pr);Af=c(r6,"设置目前勾选的节点，使用此方法必须设置 node-key 属性"),r6.forEach(e),jf=h(rn),zr=l(rn,"TD",{});var a6=a(zr);xf=c(a6,"(nodes) 接收勾选节点数据的数组"),a6.forEach(e),rn.forEach(e),Ff=h(C),Ft=l(C,"TR",{});var an=a(Ft);Vr=l(an,"TD",{});var n6=a(Vr);Mf=c(n6,"getCheckedKeys"),n6.forEach(e),Lf=h(an),Mt=l(an,"TD",{});var nn=a(Mt);Yf=c(nn,"若节点可被选择（即 "),Ar=l(nn,"CODE",{});var c6=a(Ar);Uf=c(c6,"show-checkbox"),c6.forEach(e),qf=c(nn," 为 "),jr=l(nn,"CODE",{});var s6=a(jr);Gf=c(s6,"true"),s6.forEach(e),Jf=c(nn,"），则返回目前被选中的节点的 key 所组成的数组"),nn.forEach(e),Qf=h(an),Qe=l(an,"TD",{});var Fn=a(Qe);Wf=c(Fn,"(leafOnly) 接收一个 boolean 类型的参数，若为 "),xr=l(Fn,"CODE",{});var h6=a(xr);Xf=c(h6,"true"),h6.forEach(e),Zf=c(Fn," 则仅返回被选中的叶子节点的 keys，默认值为 "),Fr=l(Fn,"CODE",{});var f6=a(Fr);ti=c(f6,"false"),f6.forEach(e),Fn.forEach(e),an.forEach(e),ei=h(C),Lt=l(C,"TR",{});var cn=a(Lt);Mr=l(cn,"TD",{});var i6=a(Mr);di=c(i6,"setCheckedKeys"),i6.forEach(e),li=h(cn),Lr=l(cn,"TD",{});var u6=a(Lr);oi=c(u6,"通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性"),u6.forEach(e),ri=h(cn),We=l(cn,"TD",{});var Mn=a(We);ai=c(Mn,"(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 "),Yr=l(Mn,"CODE",{});var v6=a(Yr);ni=c(v6,"true"),v6.forEach(e),ci=c(Mn,` 则仅设置叶子节点的选中状态，默认值为
				`),Ur=l(Mn,"CODE",{});var _6=a(Ur);si=c(_6,"false"),_6.forEach(e),Mn.forEach(e),cn.forEach(e),hi=h(C),Yt=l(C,"TR",{});var sn=a(Yt);qr=l(sn,"TD",{});var E6=a(qr);fi=c(E6,"setChecked"),E6.forEach(e),ii=h(sn),Gr=l(sn,"TD",{});var T6=a(Gr);ui=c(T6,"通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性"),T6.forEach(e),vi=h(sn),Jr=l(sn,"TD",{});var b6=a(Jr);_i=c(b6,"(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false"),b6.forEach(e),sn.forEach(e),Ei=h(C),Ut=l(C,"TR",{});var hn=a(Ut);Qr=l(hn,"TD",{});var D6=a(Qr);Ti=c(D6,"getHalfCheckedNodes"),D6.forEach(e),bi=h(hn),qt=l(hn,"TD",{});var fn=a(qt);Di=c(fn,"若节点可被选择（即 "),Wr=l(fn,"CODE",{});var m6=a(Wr);mi=c(m6,"show-checkbox"),m6.forEach(e),ki=c(fn," 为 "),Xr=l(fn,"CODE",{});var k6=a(Xr);$i=c(k6,"true"),k6.forEach(e),pi=c(fn,"），则返回目前半选中的节点所组成的数组"),fn.forEach(e),gi=h(hn),Zr=l(hn,"TD",{});var $6=a(Zr);yi=c($6,"-"),$6.forEach(e),hn.forEach(e),Ci=h(C),Gt=l(C,"TR",{});var un=a(Gt);ta=l(un,"TD",{});var p6=a(ta);Bi=c(p6,"getHalfCheckedKeys"),p6.forEach(e),Ri=h(un),Jt=l(un,"TD",{});var vn=a(Jt);Ni=c(vn,"若节点可被选择（即 "),ea=l(vn,"CODE",{});var g6=a(ea);Oi=c(g6,"show-checkbox"),g6.forEach(e),Ki=c(vn," 为 "),da=l(vn,"CODE",{});var y6=a(da);wi=c(y6,"true"),y6.forEach(e),Hi=c(vn,"），则返回目前半选中的节点的 key 所组成的数组"),vn.forEach(e),Si=h(un),la=l(un,"TD",{});var C6=a(la);Ii=c(C6,"-"),C6.forEach(e),un.forEach(e),Pi=h(C),Qt=l(C,"TR",{});var _n=a(Qt);oa=l(_n,"TD",{});var B6=a(oa);zi=c(B6,"getCurrentKey"),B6.forEach(e),Vi=h(_n),ra=l(_n,"TD",{});var R6=a(ra);Ai=c(R6,"获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null"),R6.forEach(e),ji=h(_n),aa=l(_n,"TD",{});var N6=a(aa);xi=c(N6,"—"),N6.forEach(e),_n.forEach(e),Fi=h(C),Wt=l(C,"TR",{});var En=a(Wt);na=l(En,"TD",{});var O6=a(na);Mi=c(O6,"getCurrentNode"),O6.forEach(e),Li=h(En),ca=l(En,"TD",{});var K6=a(ca);Yi=c(K6,"获取当前被选中节点的 data，若没有节点被选中则返回 null"),K6.forEach(e),Ui=h(En),sa=l(En,"TD",{});var w6=a(sa);qi=c(w6,"—"),w6.forEach(e),En.forEach(e),Gi=h(C),Xt=l(C,"TR",{});var Tn=a(Xt);ha=l(Tn,"TD",{});var H6=a(ha);Ji=c(H6,"setCurrentKey"),H6.forEach(e),Qi=h(Tn),fa=l(Tn,"TD",{});var S6=a(fa);Wi=c(S6,"通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性"),S6.forEach(e),Xi=h(Tn),ia=l(Tn,"TD",{});var I6=a(ia);Zi=c(I6,"(key) 待被选节点的 key，若为 null 则取消当前高亮的节点"),I6.forEach(e),Tn.forEach(e),tu=h(C),Zt=l(C,"TR",{});var bn=a(Zt);ua=l(bn,"TD",{});var P6=a(ua);eu=c(P6,"setCurrentNode"),P6.forEach(e),du=h(bn),va=l(bn,"TD",{});var z6=a(va);lu=c(z6,"通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性"),z6.forEach(e),ou=h(bn),_a=l(bn,"TD",{});var V6=a(_a);ru=c(V6,"(node) 待被选节点的 node"),V6.forEach(e),bn.forEach(e),au=h(C),te=l(C,"TR",{});var Dn=a(te);Ea=l(Dn,"TD",{});var A6=a(Ea);nu=c(A6,"getNode"),A6.forEach(e),cu=h(Dn),Ta=l(Dn,"TD",{});var j6=a(Ta);su=c(j6,"根据 data 或者 key 拿到 Tree 组件中的 node"),j6.forEach(e),hu=h(Dn),ba=l(Dn,"TD",{});var x6=a(ba);fu=c(x6,"(data) 要获得 node 的 key 或者 data"),x6.forEach(e),Dn.forEach(e),iu=h(C),ee=l(C,"TR",{});var mn=a(ee);Da=l(mn,"TD",{});var F6=a(Da);uu=c(F6,"remove"),F6.forEach(e),vu=h(mn),ma=l(mn,"TD",{});var M6=a(ma);_u=c(M6,"删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性"),M6.forEach(e),Eu=h(mn),ka=l(mn,"TD",{});var L6=a(ka);Tu=c(L6,"(data) 要删除的节点的 data 或者 node"),L6.forEach(e),mn.forEach(e),bu=h(C),de=l(C,"TR",{});var kn=a(de);$a=l(kn,"TD",{});var Y6=a($a);Du=c(Y6,"append"),Y6.forEach(e),mu=h(kn),pa=l(kn,"TD",{});var U6=a(pa);ku=c(U6,"为 Tree 中的一个节点追加一个子节点"),U6.forEach(e),$u=h(kn),ga=l(kn,"TD",{});var q6=a(ga);pu=c(q6,"(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node"),q6.forEach(e),kn.forEach(e),gu=h(C),le=l(C,"TR",{});var $n=a(le);ya=l($n,"TD",{});var G6=a(ya);yu=c(G6,"insertBefore"),G6.forEach(e),Cu=h($n),Ca=l($n,"TD",{});var J6=a(Ca);Bu=c(J6,"为 Tree 的一个节点的前面增加一个节点"),J6.forEach(e),Ru=h($n),Ba=l($n,"TD",{});var Q6=a(Ba);Nu=c(Q6,"(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node"),Q6.forEach(e),$n.forEach(e),Ou=h(C),oe=l(C,"TR",{});var pn=a(oe);Ra=l(pn,"TD",{});var W6=a(Ra);Ku=c(W6,"insertAfter"),W6.forEach(e),wu=h(pn),Na=l(pn,"TD",{});var X6=a(Na);Hu=c(X6,"为 Tree 的一个节点的后面增加一个节点"),X6.forEach(e),Su=h(pn),Oa=l(pn,"TD",{});var Z6=a(Oa);Iu=c(Z6,"(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node"),Z6.forEach(e),pn.forEach(e),C.forEach(e),Gn.forEach(e),Pu=h(D),bd=l(D,"H3",{class:!0});var t7=a(bd);zu=c(t7,"Events"),t7.forEach(e),Vu=h(D),Xe=l(D,"TABLE",{class:!0});var Jn=a(Xe);Ka=l(Jn,"THEAD",{});var e7=a(Ka);re=l(e7,"TR",{});var gn=a(re);wa=l(gn,"TH",{});var d7=a(wa);Au=c(d7,"事件名称"),d7.forEach(e),ju=h(gn),Ha=l(gn,"TH",{});var l7=a(Ha);xu=c(l7,"说明"),l7.forEach(e),Fu=h(gn),Sa=l(gn,"TH",{});var o7=a(Sa);Mu=c(o7,"回调参数"),o7.forEach(e),gn.forEach(e),e7.forEach(e),Lu=h(Jn),W=l(Jn,"TBODY",{});var wt=a(W);ae=l(wt,"TR",{});var yn=a(ae);Ia=l(yn,"TD",{});var r7=a(Ia);Yu=c(r7,"nodeClick"),r7.forEach(e),Uu=h(yn),Pa=l(yn,"TD",{});var a7=a(Pa);qu=c(a7,"节点被点击时的回调"),a7.forEach(e),Gu=h(yn),ad=l(yn,"TD",{});var Qn=a(ad);Ju=c(Qn,"共三个参数，依次为：传递给 "),za=l(Qn,"CODE",{});var n7=a(za);Qu=c(n7,"data"),n7.forEach(e),Wu=c(Qn," 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。"),Qn.forEach(e),yn.forEach(e),Xu=h(wt),ne=l(wt,"TR",{});var Cn=a(ne);Va=l(Cn,"TD",{});var c7=a(Va);Zu=c(c7,"nodeContextmenu"),c7.forEach(e),t4=h(Cn),Aa=l(Cn,"TD",{});var s7=a(Aa);e4=c(s7,"当某一节点被鼠标右键点击时会触发该事件"),s7.forEach(e),d4=h(Cn),nd=l(Cn,"TD",{});var Wn=a(nd);l4=c(Wn,"共四个参数，依次为：event、传递给 "),ja=l(Wn,"CODE",{});var h7=a(ja);o4=c(h7,"data"),h7.forEach(e),r4=c(Wn," 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。"),Wn.forEach(e),Cn.forEach(e),a4=h(wt),ce=l(wt,"TR",{});var Bn=a(ce);xa=l(Bn,"TD",{});var f7=a(xa);n4=c(f7,"checkChange"),f7.forEach(e),c4=h(Bn),Fa=l(Bn,"TD",{});var i7=a(Fa);s4=c(i7,"节点选中状态发生变化时的回调"),i7.forEach(e),h4=h(Bn),cd=l(Bn,"TD",{});var Xn=a(cd);f4=c(Xn,"共三个参数，依次为：传递给 "),Ma=l(Xn,"CODE",{});var u7=a(Ma);i4=c(u7,"data"),u7.forEach(e),u4=c(Xn," 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点"),Xn.forEach(e),Bn.forEach(e),v4=h(wt),se=l(wt,"TR",{});var Rn=a(se);La=l(Rn,"TD",{});var v7=a(La);_4=c(v7,"check(TODO)"),v7.forEach(e),E4=h(Rn),Ya=l(Rn,"TD",{});var _7=a(Ya);T4=c(_7,"当复选框被点击的时候触发"),_7.forEach(e),b4=h(Rn),sd=l(Rn,"TD",{});var Zn=a(sd);D4=c(Zn,"共两个参数，依次为：传递给 "),Ua=l(Zn,"CODE",{});var E7=a(Ua);m4=c(E7,"data"),E7.forEach(e),k4=c(Zn,` 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含
				checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性`),Zn.forEach(e),Rn.forEach(e),$4=h(wt),he=l(wt,"TR",{});var Nn=a(he);qa=l(Nn,"TD",{});var T7=a(qa);p4=c(T7,"currentChange(TODO)"),T7.forEach(e),g4=h(Nn),Ga=l(Nn,"TD",{});var b7=a(Ga);y4=c(b7,"当前选中节点变化时触发的事件"),b7.forEach(e),C4=h(Nn),Ja=l(Nn,"TD",{});var D7=a(Ja);B4=c(D7,"共两个参数，依次为：当前节点的数据，当前节点的 Node 对象"),D7.forEach(e),Nn.forEach(e),R4=h(wt),fe=l(wt,"TR",{});var On=a(fe);Qa=l(On,"TD",{});var m7=a(Qa);N4=c(m7,"nodeExpand"),m7.forEach(e),O4=h(On),Wa=l(On,"TD",{});var k7=a(Wa);K4=c(k7,"节点被展开时触发的事件"),k7.forEach(e),w4=h(On),hd=l(On,"TD",{});var t1=a(hd);H4=c(t1,"共三个参数，依次为：传递给 "),Xa=l(t1,"CODE",{});var $7=a(Xa);S4=c($7,"data"),$7.forEach(e),I4=c(t1," 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身"),t1.forEach(e),On.forEach(e),wt.forEach(e),Jn.forEach(e),D.forEach(e),this.h()},h:function(){document.title="Tree 树形控件 组件文档 BeerUi-官方文档",R(f,"name","description"),R(f,"content","BeerUi, 基于 svelte 的 PC端 组件库，base on svelte 3.0 web component"),o(f,r,244,1,6203),R(u,"name","keywords"),R(u,"content","Tree 树形控件, beerui组件文档,beerui,beerui文档,beerui官网, BeerUi,@brewer/beerui,svelte,component,svelteKit"),o(u,r,245,1,6301),o(_,r,248,1,6476),o(p,r,249,1,6496),o(K,r,250,1,6525),o(N,r,251,1,6540),o(B,r,266,1,7009),o(X,r,267,1,7023),o(Ye,r,332,1,8413),o(Ze,r,381,1,9282),o(St,r,444,1,10399),o(kd,r,445,1,10414),o($d,r,502,1,11394),o(pd,r,503,1,11411),o(gd,r,610,1,13806),o(yd,r,611,1,13821),R(_d,"class","demo-table-title"),o(_d,r,660,1,14938),o(Bd,r,664,3,15031),o(Rd,r,665,3,15046),o(Nd,r,666,3,15061),o(Od,r,667,3,15076),o(Kd,r,668,3,15092),o(tt,r,663,2,15023),o(Cd,r,662,2,15013),o(wd,r,673,3,15144),o(Hd,r,674,3,15161),o(Sd,r,675,3,15178),o(Id,r,676,3,15196),o(Pd,r,677,3,15210),o(et,r,672,2,15136),o(zd,r,680,3,15239),o(Vd,r,681,3,15261),o(Ad,r,682,3,15286),o(jd,r,683,3,15305),o(xd,r,684,3,15319),o(dt,r,679,2,15231),o(Fd,r,687,3,15348),o(Md,r,688,3,15368),o(Ld,r,689,3,15407),o(Yd,r,690,3,15426),o(Ud,r,691,3,15440),o(lt,r,686,2,15340),o(qd,r,694,3,15473),o(Gd,r,695,3,15491),o(Jd,r,696,3,15514),o(Qd,r,697,3,15533),o(Wd,r,698,3,15547),o(ot,r,693,2,15465),o(Xd,r,701,3,15576),o(Zd,r,702,3,15606),o(tl,r,703,3,15640),o(el,r,704,3,15660),o(dl,r,705,3,15674),o(rt,r,700,2,15568),o(ll,r,708,3,15706),o(ol,r,709,3,15723),o(rl,r,710,3,15765),o(al,r,711,3,15801),o(nl,r,712,3,15815),o(at,r,707,2,15698),o(cl,r,715,3,15844),o(sl,r,716,3,15870),o(hl,r,717,3,15902),o(fl,r,718,3,15952),o(il,r,719,3,15966),o(nt,r,714,2,15836),o(ul,r,722,3,15995),o(vl,r,723,3,16024),o(_l,r,724,3,16059),o(El,r,725,3,16079),o(Tl,r,726,3,16093),o(ct,r,721,2,15987),o(bl,r,729,3,16126),o(Dl,r,730,3,16155),o(ml,r,731,3,16178),o(kl,r,732,3,16198),o($l,r,733,3,16212),o(st,r,728,2,16118),o(pl,r,736,3,16245),o(gl,r,737,3,16275),o(yl,r,738,3,16350),o(Cl,r,739,3,16370),o(Bl,r,740,3,16384),o(ht,r,735,2,16237),o(Rl,r,743,3,16416),o(Nl,r,744,3,16445),o(Ol,r,745,3,16501),o(Kl,r,746,3,16521),o(wl,r,747,3,16535),o(ft,r,742,2,16408),o(Hl,r,750,3,16568),o(Sl,r,751,3,16597),o(Il,r,752,3,16627),o(Pl,r,753,3,16647),o(zl,r,754,3,16661),o(it,r,749,2,16560),o(Vl,r,757,3,16693),o(Al,r,758,3,16725),o(jl,r,759,3,16754),o(xl,r,760,3,16772),o(Fl,r,761,3,16786),o(ut,r,756,2,16685),o(Ml,r,764,3,16815),o(Ll,r,765,3,16840),o(Yl,r,766,3,16861),o(Ul,r,767,3,16881),o(ql,r,768,3,16895),o(vt,r,763,2,16807),o(Gl,r,771,3,16928),o(Jl,r,772,3,16954),o(Ql,r,773,3,17005),o(Wl,r,774,3,17025),o(Xl,r,775,3,17039),o(_t,r,770,2,16920),o(Zl,r,778,3,17072),o(to,r,779,3,17103),o(eo,r,780,3,17132),o(lo,r,781,3,17150),o(oo,r,782,3,17164),o(Et,r,777,2,17064),o(ro,r,785,3,17193),o(ao,r,786,3,17220),o(no,r,787,3,17240),o(co,r,788,3,17267),o(so,r,789,3,17281),o(Tt,r,784,2,17185),o(ho,r,792,3,17310),o(fo,r,793,3,17339),o(io,r,794,3,17406),o(uo,r,795,3,17446),o(vo,r,796,3,17460),o(bt,r,791,2,17302),o(_o,r,799,3,17489),o(Eo,r,800,3,17517),o(To,r,801,3,17546),o(bo,r,802,3,17566),o(Do,r,803,3,17580),o(Dt,r,798,2,17481),o(mo,r,806,3,17613),o(ko,r,807,3,17638),o($o,r,808,3,17668),o(po,r,809,3,17687),o(go,r,810,3,17701),o(mt,r,805,2,17605),o(yo,r,813,3,17731),o(Co,r,814,3,17759),o(Bo,r,815,3,17781),o(Ro,r,816,3,17800),o(No,r,817,3,17814),o(kt,r,812,2,17723),o(Oo,r,820,3,17843),o(Ko,r,821,3,17860),o(wo,r,822,3,17896),o(Ho,r,823,3,17916),o(So,r,824,3,17930),o($t,r,819,2,17835),o(Io,r,827,3,17963),o(Po,r,828,3,17991),o(zo,r,829,3,18014),o(Vo,r,830,3,18034),o(Ao,r,831,3,18048),o(pt,r,826,2,17955),o(jo,r,834,3,18081),o(xo,r,835,3,18109),o(Fo,r,836,3,18131),o(Mo,r,837,3,18158),o(Lo,r,838,3,18172),o(gt,r,833,2,18073),o(Yo,r,841,3,18201),o(Uo,r,842,22,18248),o(rd,r,842,3,18229),o(qo,r,843,3,18336),o(Go,r,844,3,18387),o(Jo,r,845,3,18401),o(yt,r,840,2,18193),o(k,r,671,2,15126),R(Ue,"class","demo-table"),o(Ue,r,661,1,14984),R(Ed,"class","demo-table-title"),o(Ed,r,849,1,18442),o(Wo,r,853,3,18530),o(Xo,r,854,3,18545),o(Zo,r,855,3,18560),o(It,r,852,2,18522),o(Qo,r,851,2,18512),o(tr,r,860,3,18611),o(er,r,861,3,18629),o(dr,r,862,3,18659),o(lr,r,863,3,18700),o(or,r,864,3,18714),o(Ct,r,859,2,18603),o(rr,r,867,3,18743),o(ar,r,868,3,18764),o(nr,r,869,3,18792),o(cr,r,870,3,18811),o(sr,r,871,3,18825),o(Bt,r,866,2,18735),o(hr,r,874,3,18854),o(fr,r,875,3,18875),o(ir,r,876,3,18910),o(ur,r,877,3,18952),o(vr,r,878,3,18966),o(Rt,r,873,2,18846),o(_r,r,881,3,18995),o(Er,r,882,3,19014),o(Tr,r,883,3,19058),o(br,r,884,3,19100),o(Dr,r,885,3,19114),o(Nt,r,880,2,18987),o(Kt,r,858,2,18593),R(qe,"class","demo-table"),o(qe,r,850,1,18483),R(Td,"class","demo-table-title"),o(Td,r,889,1,19155),o(kr,r,893,3,19244),o($r,r,894,3,19261),o(pr,r,895,3,19276),o(Pt,r,892,2,19236),o(mr,r,891,2,19226),o(gr,r,900,3,19327),o(yr,r,901,3,19346),o(Cr,r,902,3,19369),o(zt,r,899,2,19319),o(Br,r,905,3,19442),o(Rr,r,906,3,19472),o(Nr,r,907,3,19522),o(Vt,r,904,2,19434),o(Or,r,910,3,19589),o(Kr,r,911,17,19631),o(wr,r,911,46,19660),o(jt,r,911,3,19617),o(Hr,r,912,74,19776),o(Sr,r,912,110,19812),o(Je,r,912,3,19705),o(At,r,909,2,19581),o(Ir,r,916,3,19858),o(Pr,r,917,3,19886),o(zr,r,918,3,19930),o(xt,r,915,2,19850),o(Vr,r,921,3,19977),o(Ar,r,922,17,20018),o(jr,r,922,46,20047),o(Mt,r,922,3,20004),o(xr,r,923,40,20135),o(Fr,r,923,82,20177),o(Qe,r,923,3,20098),o(Ft,r,920,2,19969),o(Mr,r,926,3,20219),o(Lr,r,927,3,20246),o(Yr,r,928,68,20363),o(Ur,r,929,4,20404),o(We,r,928,3,20298),o(Lt,r,925,2,20211),o(qr,r,932,3,20446),o(Gr,r,933,3,20469),o(Jr,r,934,3,20529),o(Yt,r,931,2,20438),o(Qr,r,938,3,20668),o(Wr,r,939,17,20714),o(Xr,r,939,46,20743),o(qt,r,939,3,20700),o(Zr,r,940,3,20788),o(Ut,r,937,2,20660),o(ta,r,943,3,20817),o(ea,r,944,17,20862),o(da,r,944,46,20891),o(Jt,r,944,3,20848),o(la,r,945,3,20942),o(Gt,r,942,2,20809),o(oa,r,948,3,20971),o(ra,r,949,3,20997),o(aa,r,950,3,21063),o(Qt,r,947,2,20963),o(na,r,953,3,21092),o(ca,r,954,3,21119),o(sa,r,955,3,21164),o(Wt,r,952,2,21084),o(ha,r,958,3,21193),o(fa,r,959,3,21219),o(ia,r,960,3,21274),o(Xt,r,957,2,21185),o(ua,r,963,3,21337),o(va,r,964,3,21364),o(_a,r,965,3,21420),o(Zt,r,962,2,21329),o(Ea,r,968,3,21466),o(Ta,r,969,3,21486),o(ba,r,970,3,21531),o(te,r,967,2,21458),o(Da,r,973,3,21588),o(ma,r,974,3,21607),o(ka,r,975,3,21656),o(ee,r,972,2,21580),o($a,r,978,3,21711),o(pa,r,979,3,21730),o(ga,r,980,3,21763),o(de,r,977,2,21703),o(ya,r,983,3,21867),o(Ca,r,984,3,21892),o(Ba,r,985,3,21926),o(le,r,982,2,21859),o(Ra,r,988,3,22026),o(Na,r,989,3,22050),o(Oa,r,990,3,22084),o(oe,r,987,2,22018),o(y,r,898,2,19309),R(Ge,"class","demo-table"),o(Ge,r,890,1,19197),R(bd,"class","demo-table-title"),o(bd,r,994,1,22196),o(wa,r,998,3,22285),o(Ha,r,999,3,22302),o(Sa,r,1e3,3,22317),o(re,r,997,2,22277),o(Ka,r,996,2,22267),o(Ia,r,1005,3,22370),o(Pa,r,1006,3,22392),o(za,r,1007,21,22432),o(ad,r,1007,3,22414),o(ae,r,1004,2,22362),o(Va,r,1010,3,22508),o(Aa,r,1011,3,22536),o(ja,r,1012,27,22592),o(nd,r,1012,3,22568),o(ne,r,1009,2,22500),o(xa,r,1015,3,22668),o(Fa,r,1016,3,22692),o(Ma,r,1017,21,22737),o(cd,r,1017,3,22719),o(ce,r,1014,2,22660),o(La,r,1020,3,22820),o(Ya,r,1021,3,22844),o(Ua,r,1022,21,22887),o(sd,r,1022,3,22869),o(se,r,1019,2,22812),o(qa,r,1027,3,23029),o(Ga,r,1028,3,23061),o(Ja,r,1029,3,23088),o(he,r,1026,2,23021),o(Qa,r,1032,3,23147),o(Wa,r,1033,3,23170),o(Xa,r,1034,21,23212),o(hd,r,1034,3,23194),o(fe,r,1031,2,23139),o(W,r,1003,2,22352),R(Xe,"class","demo-table"),o(Xe,r,995,1,22238),R(i,"class","page-container"),o(i,r,247,0,6446)},m:function(O,z){t(document.head,f),t(document.head,u),U(O,v,z),U(O,i,z),t(i,_),t(_,T),t(i,b),t(i,p),t(p,g),t(i,w),t(i,K),t(K,G),t(i,H),t(i,N),t(N,P),t(i,Z),F(V,i,null),t(i,S),t(i,B),t(B,I),t(i,A),t(i,X),t(X,Me),t(i,Le),F(Q,i,null),t(i,Ot),t(i,Ye),t(Ye,md),t(i,wn),F(Ht,i,null),t(i,Hn),t(i,Ze),t(Ze,Sn),t(i,m),F(J,i,null),t(i,td),t(i,St),t(St,ed),t(i,vd),t(i,kd),t(kd,d1),t(i,l1),F(dd,i,null),t(i,o1),t(i,$d),t($d,r1),t(i,a1),t(i,pd),t(pd,n1),t(i,c1),F(ld,i,null),t(i,s1),t(i,gd),t(gd,h1),t(i,f1),t(i,yd),t(yd,i1),t(i,u1),F(od,i,null),t(i,v1),t(i,_d),t(_d,_1),t(i,E1),t(i,Ue),t(Ue,Cd),t(Cd,tt),t(tt,Bd),t(Bd,T1),t(tt,b1),t(tt,Rd),t(Rd,D1),t(tt,m1),t(tt,Nd),t(Nd,k1),t(tt,$1),t(tt,Od),t(Od,p1),t(tt,g1),t(tt,Kd),t(Kd,y1),t(Ue,C1),t(Ue,k),t(k,et),t(et,wd),t(wd,B1),t(et,R1),t(et,Hd),t(Hd,N1),t(et,O1),t(et,Sd),t(Sd,K1),t(et,w1),t(et,Id),t(Id,H1),t(et,S1),t(et,Pd),t(Pd,I1),t(k,P1),t(k,dt),t(dt,zd),t(zd,z1),t(dt,V1),t(dt,Vd),t(Vd,A1),t(dt,j1),t(dt,Ad),t(Ad,x1),t(dt,F1),t(dt,jd),t(jd,M1),t(dt,L1),t(dt,xd),t(xd,Y1),t(k,U1),t(k,lt),t(lt,Fd),t(Fd,q1),t(lt,G1),t(lt,Md),t(Md,J1),t(lt,Q1),t(lt,Ld),t(Ld,W1),t(lt,X1),t(lt,Yd),t(Yd,Z1),t(lt,tc),t(lt,Ud),t(Ud,ec),t(k,dc),t(k,ot),t(ot,qd),t(qd,lc),t(ot,oc),t(ot,Gd),t(Gd,rc),t(ot,ac),t(ot,Jd),t(Jd,nc),t(ot,cc),t(ot,Qd),t(Qd,sc),t(ot,hc),t(ot,Wd),t(Wd,fc),t(k,ic),t(k,rt),t(rt,Xd),t(Xd,uc),t(rt,vc),t(rt,Zd),t(Zd,_c),t(rt,Ec),t(rt,tl),t(tl,Tc),t(rt,bc),t(rt,el),t(el,Dc),t(rt,mc),t(rt,dl),t(dl,kc),t(k,$c),t(k,at),t(at,ll),t(ll,pc),t(at,gc),t(at,ol),t(ol,yc),t(at,Cc),t(at,rl),t(rl,Bc),t(at,Rc),t(at,al),t(al,Nc),t(at,Oc),t(at,nl),t(nl,Kc),t(k,wc),t(k,nt),t(nt,cl),t(cl,Hc),t(nt,Sc),t(nt,sl),t(sl,Ic),t(nt,Pc),t(nt,hl),t(hl,zc),t(nt,Vc),t(nt,fl),t(fl,Ac),t(nt,jc),t(nt,il),t(il,xc),t(k,Fc),t(k,ct),t(ct,ul),t(ul,Mc),t(ct,Lc),t(ct,vl),t(vl,Yc),t(ct,Uc),t(ct,_l),t(_l,qc),t(ct,Gc),t(ct,El),t(El,Jc),t(ct,Qc),t(ct,Tl),t(Tl,Wc),t(k,Xc),t(k,st),t(st,bl),t(bl,Zc),t(st,ts),t(st,Dl),t(Dl,es),t(st,ds),t(st,ml),t(ml,ls),t(st,os),t(st,kl),t(kl,rs),t(st,as),t(st,$l),t($l,ns),t(k,cs),t(k,ht),t(ht,pl),t(pl,ss),t(ht,hs),t(ht,gl),t(gl,fs),t(ht,is),t(ht,yl),t(yl,us),t(ht,vs),t(ht,Cl),t(Cl,_s),t(ht,Es),t(ht,Bl),t(Bl,Ts),t(k,bs),t(k,ft),t(ft,Rl),t(Rl,Ds),t(ft,ms),t(ft,Nl),t(Nl,ks),t(ft,$s),t(ft,Ol),t(Ol,ps),t(ft,gs),t(ft,Kl),t(Kl,ys),t(ft,Cs),t(ft,wl),t(wl,Bs),t(k,Rs),t(k,it),t(it,Hl),t(Hl,Ns),t(it,Os),t(it,Sl),t(Sl,Ks),t(it,ws),t(it,Il),t(Il,Hs),t(it,Ss),t(it,Pl),t(Pl,Is),t(it,Ps),t(it,zl),t(zl,zs),t(k,Vs),t(k,ut),t(ut,Vl),t(Vl,As),t(ut,js),t(ut,Al),t(Al,xs),t(ut,Fs),t(ut,jl),t(jl,Ms),t(ut,Ls),t(ut,xl),t(xl,Ys),t(ut,Us),t(ut,Fl),t(Fl,qs),t(k,Gs),t(k,vt),t(vt,Ml),t(Ml,Js),t(vt,Qs),t(vt,Ll),t(Ll,Ws),t(vt,Xs),t(vt,Yl),t(Yl,Zs),t(vt,t2),t(vt,Ul),t(Ul,e2),t(vt,d2),t(vt,ql),t(ql,l2),t(k,o2),t(k,_t),t(_t,Gl),t(Gl,r2),t(_t,a2),t(_t,Jl),t(Jl,n2),t(_t,c2),t(_t,Ql),t(Ql,s2),t(_t,h2),t(_t,Wl),t(Wl,f2),t(_t,i2),t(_t,Xl),t(Xl,u2),t(k,v2),t(k,Et),t(Et,Zl),t(Zl,_2),t(Et,E2),t(Et,to),t(to,T2),t(Et,b2),t(Et,eo),t(eo,D2),t(Et,m2),t(Et,lo),t(lo,k2),t(Et,$2),t(Et,oo),t(oo,p2),t(k,g2),t(k,Tt),t(Tt,ro),t(ro,y2),t(Tt,C2),t(Tt,ao),t(ao,B2),t(Tt,R2),t(Tt,no),t(no,N2),t(Tt,O2),t(Tt,co),t(co,K2),t(Tt,w2),t(Tt,so),t(so,H2),t(k,S2),t(k,bt),t(bt,ho),t(ho,I2),t(bt,P2),t(bt,fo),t(fo,z2),t(bt,V2),t(bt,io),t(io,A2),t(bt,j2),t(bt,uo),t(uo,x2),t(bt,F2),t(bt,vo),t(vo,M2),t(k,L2),t(k,Dt),t(Dt,_o),t(_o,Y2),t(Dt,U2),t(Dt,Eo),t(Eo,q2),t(Dt,G2),t(Dt,To),t(To,J2),t(Dt,Q2),t(Dt,bo),t(bo,W2),t(Dt,X2),t(Dt,Do),t(Do,Z2),t(k,t3),t(k,mt),t(mt,mo),t(mo,e3),t(mt,d3),t(mt,ko),t(ko,l3),t(mt,o3),t(mt,$o),t($o,r3),t(mt,a3),t(mt,po),t(po,n3),t(mt,c3),t(mt,go),t(go,s3),t(k,h3),t(k,kt),t(kt,yo),t(yo,f3),t(kt,i3),t(kt,Co),t(Co,u3),t(kt,v3),t(kt,Bo),t(Bo,_3),t(kt,E3),t(kt,Ro),t(Ro,T3),t(kt,b3),t(kt,No),t(No,D3),t(k,m3),t(k,$t),t($t,Oo),t(Oo,k3),t($t,$3),t($t,Ko),t(Ko,p3),t($t,g3),t($t,wo),t(wo,y3),t($t,C3),t($t,Ho),t(Ho,B3),t($t,R3),t($t,So),t(So,N3),t(k,O3),t(k,pt),t(pt,Io),t(Io,K3),t(pt,w3),t(pt,Po),t(Po,H3),t(pt,S3),t(pt,zo),t(zo,I3),t(pt,P3),t(pt,Vo),t(Vo,z3),t(pt,V3),t(pt,Ao),t(Ao,A3),t(k,j3),t(k,gt),t(gt,jo),t(jo,x3),t(gt,F3),t(gt,xo),t(xo,M3),t(gt,L3),t(gt,Fo),t(Fo,Y3),t(gt,U3),t(gt,Mo),t(Mo,q3),t(gt,G3),t(gt,Lo),t(Lo,J3),t(k,Q3),t(k,yt),t(yt,Yo),t(Yo,W3),t(yt,X3),t(yt,rd),t(rd,Z3),t(rd,Uo),t(Uo,th),t(rd,eh),t(yt,dh),t(yt,qo),t(qo,lh),t(yt,oh),t(yt,Go),t(Go,rh),t(yt,ah),t(yt,Jo),t(Jo,nh),t(i,ch),t(i,Ed),t(Ed,sh),t(i,hh),t(i,qe),t(qe,Qo),t(Qo,It),t(It,Wo),t(Wo,fh),t(It,ih),t(It,Xo),t(Xo,uh),t(It,vh),t(It,Zo),t(Zo,_h),t(qe,Eh),t(qe,Kt),t(Kt,Ct),t(Ct,tr),t(tr,Th),t(Ct,bh),t(Ct,er),t(er,Dh),t(Ct,mh),t(Ct,dr),t(dr,kh),t(Ct,$h),t(Ct,lr),t(lr,ph),t(Ct,gh),t(Ct,or),t(or,yh),t(Kt,Ch),t(Kt,Bt),t(Bt,rr),t(rr,Bh),t(Bt,Rh),t(Bt,ar),t(ar,Nh),t(Bt,Oh),t(Bt,nr),t(nr,Kh),t(Bt,wh),t(Bt,cr),t(cr,Hh),t(Bt,Sh),t(Bt,sr),t(sr,Ih),t(Kt,Ph),t(Kt,Rt),t(Rt,hr),t(hr,zh),t(Rt,Vh),t(Rt,fr),t(fr,Ah),t(Rt,jh),t(Rt,ir),t(ir,xh),t(Rt,Fh),t(Rt,ur),t(ur,Mh),t(Rt,Lh),t(Rt,vr),t(vr,Yh),t(Kt,Uh),t(Kt,Nt),t(Nt,_r),t(_r,qh),t(Nt,Gh),t(Nt,Er),t(Er,Jh),t(Nt,Qh),t(Nt,Tr),t(Tr,Wh),t(Nt,Xh),t(Nt,br),t(br,Zh),t(Nt,tf),t(Nt,Dr),t(Dr,ef),t(i,df),t(i,Td),t(Td,lf),t(i,of),t(i,Ge),t(Ge,mr),t(mr,Pt),t(Pt,kr),t(kr,rf),t(Pt,af),t(Pt,$r),t($r,nf),t(Pt,cf),t(Pt,pr),t(pr,sf),t(Ge,hf),t(Ge,y),t(y,zt),t(zt,gr),t(gr,ff),t(zt,uf),t(zt,yr),t(yr,vf),t(zt,_f),t(zt,Cr),t(Cr,Ef),t(y,Tf),t(y,Vt),t(Vt,Br),t(Br,bf),t(Vt,Df),t(Vt,Rr),t(Rr,mf),t(Vt,kf),t(Vt,Nr),t(Nr,$f),t(y,pf),t(y,At),t(At,Or),t(Or,gf),t(At,yf),t(At,jt),t(jt,Cf),t(jt,Kr),t(Kr,Bf),t(jt,Rf),t(jt,wr),t(wr,Nf),t(jt,Of),t(At,Kf),t(At,Je),t(Je,wf),t(Je,Hr),t(Hr,Hf),t(Je,Sf),t(Je,Sr),t(Sr,If),t(y,Pf),t(y,xt),t(xt,Ir),t(Ir,zf),t(xt,Vf),t(xt,Pr),t(Pr,Af),t(xt,jf),t(xt,zr),t(zr,xf),t(y,Ff),t(y,Ft),t(Ft,Vr),t(Vr,Mf),t(Ft,Lf),t(Ft,Mt),t(Mt,Yf),t(Mt,Ar),t(Ar,Uf),t(Mt,qf),t(Mt,jr),t(jr,Gf),t(Mt,Jf),t(Ft,Qf),t(Ft,Qe),t(Qe,Wf),t(Qe,xr),t(xr,Xf),t(Qe,Zf),t(Qe,Fr),t(Fr,ti),t(y,ei),t(y,Lt),t(Lt,Mr),t(Mr,di),t(Lt,li),t(Lt,Lr),t(Lr,oi),t(Lt,ri),t(Lt,We),t(We,ai),t(We,Yr),t(Yr,ni),t(We,ci),t(We,Ur),t(Ur,si),t(y,hi),t(y,Yt),t(Yt,qr),t(qr,fi),t(Yt,ii),t(Yt,Gr),t(Gr,ui),t(Yt,vi),t(Yt,Jr),t(Jr,_i),t(y,Ei),t(y,Ut),t(Ut,Qr),t(Qr,Ti),t(Ut,bi),t(Ut,qt),t(qt,Di),t(qt,Wr),t(Wr,mi),t(qt,ki),t(qt,Xr),t(Xr,$i),t(qt,pi),t(Ut,gi),t(Ut,Zr),t(Zr,yi),t(y,Ci),t(y,Gt),t(Gt,ta),t(ta,Bi),t(Gt,Ri),t(Gt,Jt),t(Jt,Ni),t(Jt,ea),t(ea,Oi),t(Jt,Ki),t(Jt,da),t(da,wi),t(Jt,Hi),t(Gt,Si),t(Gt,la),t(la,Ii),t(y,Pi),t(y,Qt),t(Qt,oa),t(oa,zi),t(Qt,Vi),t(Qt,ra),t(ra,Ai),t(Qt,ji),t(Qt,aa),t(aa,xi),t(y,Fi),t(y,Wt),t(Wt,na),t(na,Mi),t(Wt,Li),t(Wt,ca),t(ca,Yi),t(Wt,Ui),t(Wt,sa),t(sa,qi),t(y,Gi),t(y,Xt),t(Xt,ha),t(ha,Ji),t(Xt,Qi),t(Xt,fa),t(fa,Wi),t(Xt,Xi),t(Xt,ia),t(ia,Zi),t(y,tu),t(y,Zt),t(Zt,ua),t(ua,eu),t(Zt,du),t(Zt,va),t(va,lu),t(Zt,ou),t(Zt,_a),t(_a,ru),t(y,au),t(y,te),t(te,Ea),t(Ea,nu),t(te,cu),t(te,Ta),t(Ta,su),t(te,hu),t(te,ba),t(ba,fu),t(y,iu),t(y,ee),t(ee,Da),t(Da,uu),t(ee,vu),t(ee,ma),t(ma,_u),t(ee,Eu),t(ee,ka),t(ka,Tu),t(y,bu),t(y,de),t(de,$a),t($a,Du),t(de,mu),t(de,pa),t(pa,ku),t(de,$u),t(de,ga),t(ga,pu),t(y,gu),t(y,le),t(le,ya),t(ya,yu),t(le,Cu),t(le,Ca),t(Ca,Bu),t(le,Ru),t(le,Ba),t(Ba,Nu),t(y,Ou),t(y,oe),t(oe,Ra),t(Ra,Ku),t(oe,wu),t(oe,Na),t(Na,Hu),t(oe,Su),t(oe,Oa),t(Oa,Iu),t(i,Pu),t(i,bd),t(bd,zu),t(i,Vu),t(i,Xe),t(Xe,Ka),t(Ka,re),t(re,wa),t(wa,Au),t(re,ju),t(re,Ha),t(Ha,xu),t(re,Fu),t(re,Sa),t(Sa,Mu),t(Xe,Lu),t(Xe,W),t(W,ae),t(ae,Ia),t(Ia,Yu),t(ae,Uu),t(ae,Pa),t(Pa,qu),t(ae,Gu),t(ae,ad),t(ad,Ju),t(ad,za),t(za,Qu),t(ad,Wu),t(W,Xu),t(W,ne),t(ne,Va),t(Va,Zu),t(ne,t4),t(ne,Aa),t(Aa,e4),t(ne,d4),t(ne,nd),t(nd,l4),t(nd,ja),t(ja,o4),t(nd,r4),t(W,a4),t(W,ce),t(ce,xa),t(xa,n4),t(ce,c4),t(ce,Fa),t(Fa,s4),t(ce,h4),t(ce,cd),t(cd,f4),t(cd,Ma),t(Ma,i4),t(cd,u4),t(W,v4),t(W,se),t(se,La),t(La,_4),t(se,E4),t(se,Ya),t(Ya,T4),t(se,b4),t(se,sd),t(sd,D4),t(sd,Ua),t(Ua,m4),t(sd,k4),t(W,$4),t(W,he),t(he,qa),t(qa,p4),t(he,g4),t(he,Ga),t(Ga,y4),t(he,C4),t(he,Ja),t(Ja,B4),t(W,R4),t(W,fe),t(fe,Qa),t(Qa,N4),t(fe,O4),t(fe,Wa),t(Wa,K4),t(fe,w4),t(fe,hd),t(hd,H4),t(hd,Xa),t(Xa,S4),t(hd,I4),Ln=!0},p:function(O,[z]){const D={};z&268435457&&(D.$$scope={dirty:z,ctx:O}),V.$set(D);const In={};z&268435456&&(In.$$scope={dirty:z,ctx:O}),Q.$set(In);const Pn={};z&268435456&&(Pn.$$scope={dirty:z,ctx:O}),Ht.$set(Pn);const zn={};z&268435456&&(zn.$$scope={dirty:z,ctx:O}),J.$set(zn);const Vn={};z&268435456&&(Vn.$$scope={dirty:z,ctx:O}),dd.$set(Vn);const An={};z&268435458&&(An.$$scope={dirty:z,ctx:O}),ld.$set(An);const jn={};z&268435468&&(jn.$$scope={dirty:z,ctx:O}),od.$set(jn)},i:function(O){Ln||(M(V.$$.fragment,O),M(Q.$$.fragment,O),M(Ht.$$.fragment,O),M(J.$$.fragment,O),M(dd.$$.fragment,O),M(ld.$$.fragment,O),M(od.$$.fragment,O),Ln=!0)},o:function(O){L(V.$$.fragment,O),L(Q.$$.fragment,O),L(Ht.$$.fragment,O),L(J.$$.fragment,O),L(dd.$$.fragment,O),L(ld.$$.fragment,O),L(od.$$.fragment,O),Ln=!1},d:function(O){e(f),e(u),O&&e(v),O&&e(i),Y(V),Y(Q),Y(Ht),Y(J),Y(dd),Y(ld),Y(od)}};return q("SvelteRegisterBlock",{block:V4,id:P4.name,type:"component",source:"",ctx:E}),V4}function W7(E,f,u){let{$$slots:v={},$$scope:i}=f;G7("Page",v,[]);let _=[];setTimeout(()=>{u(0,_=T)},1e3);const T=[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],b={children:"children",label:"label"},p=m=>console.log("index",m.detail),g={children:"zones",label:"name"};let w=0;const K=(m,J)=>{var td,St;if(m.level===0)return J([{name:"region1"},{name:"region2"}]);if(m.level>3)return J([]);if(!J)return;let ed;((td=m==null?void 0:m.data)===null||td===void 0?void 0:td.name)==="region1"?ed=!0:((St=m==null?void 0:m.data)===null||St===void 0?void 0:St.name)==="region2"?ed=!1:ed=Math.random()>.5,setTimeout(()=>{let vd;ed?vd=[{name:"zone"+w++},{name:"zone"+w++}]:vd=[],J(vd)},5e3)},G=m=>{console.log(m)},H={label:"name",children:"zones",isLeaf:"leaf"},N=(m,J)=>{if(m.level===0)return J([{name:"region"}]);if(m.level>1)return J([]);setTimeout(()=>{J([{name:"leaf",leaf:!0},{name:"zone"}])},500)};let P=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];const Z=[{id:1,label:"一级 2",children:[{id:3,label:"二级 2-1",children:[{id:4,label:"三级 3-1-1"},{id:5,label:"三级 3-1-2",disabled:!0}]},{id:2,label:"二级 2-2",disabled:!0,children:[{id:6,label:"三级 3-2-1"},{id:7,label:"三级 3-2-2",disabled:!0}]}]}];let V=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],S=null;const B=()=>{console.log(S),console.log(S.getCheckedNodes())},I=()=>{console.log(S.getCheckedKeys())},A=()=>{S.setCheckedNodes([{id:5,label:"二级 2-1"},{id:9,label:"三级 1-1-1"}]),console.log("theTree",S)},X=()=>{S.setCheckedKeys([3])},Me=()=>{S.setCheckedKeys([])};let Le=m=>{console.log("checkChangeHandle",m)},Q=null,Ot="";const Ye=()=>{Q.filter(Ot)},md=(m,J)=>m?J.label.indexOf(m)!==-1:!0,wn=[];Object.keys(f).forEach(m=>{!~wn.indexOf(m)&&m.slice(0,2)!=="$$"&&m!=="slot"&&Q7.warn(`<Page> was created with unknown prop '${m}'`)});function Ht(m){_=m,u(0,_)}function Hn(m){e1[m?"unshift":"push"](()=>{S=m,u(1,S)})}function Ze(m){Ot=m,u(3,Ot)}function Sn(m){e1[m?"unshift":"push"](()=>{Q=m,u(2,Q)})}return E.$capture_state=()=>({DemoBlock:id,BeTree:ud,BeButton:Kn,BeInput:y7,dataLazy:_,data:T,defaultProps:b,handleNodeClick:p,defaultProps1:g,count:w,loadNode:K,handleCheckChange:G,defaultProps2:H,loadNode2:N,dataDefault:P,data2:Z,data3:V,theTree:S,getCheckedNodes:B,getCheckedKeys:I,setCheckedNodes:A,setCheckedKeys:X,resetChecked:Me,checkChangeHandle:Le,theFilterTree:Q,value:Ot,filterText:Ye,filterNodeMethod:md}),E.$inject_state=m=>{"dataLazy"in m&&u(0,_=m.dataLazy),"count"in m&&(w=m.count),"dataDefault"in m&&u(11,P=m.dataDefault),"data3"in m&&u(13,V=m.data3),"theTree"in m&&u(1,S=m.theTree),"checkChangeHandle"in m&&(Le=m.checkChangeHandle),"theFilterTree"in m&&u(2,Q=m.theFilterTree),"value"in m&&u(3,Ot=m.value)},f&&"$$inject"in f&&E.$inject_state(f.$$inject),[_,S,Q,Ot,b,p,g,K,G,H,N,P,Z,V,B,I,A,X,Me,Ye,md,Ht,Hn,Ze,Sn]}class l9 extends L7{constructor(f){super(f),Y7(this,f,W7,P4,U7,{}),q("SvelteRegisterComponent",{component:this,tagName:"Page",options:f,id:P4.name})}}export{l9 as default};
